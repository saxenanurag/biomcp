{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BioMCP: Biomedical Model Context Protocol Server","text":"<p>BioMCP is a specialized Model Context Protocol (MCP) server that connects AI assistants like Claude to biomedical data sources, including ClinicalTrials.gov, PubMed, and MyVariant.info.</p>"},{"location":"#built-and-maintained-by","title":"Built and Maintained by","text":""},{"location":"#quick-start-claude-desktop-setup","title":"Quick Start: Claude Desktop Setup","text":"<p>The fastest way to get started with BioMCP is to set it up with Claude Desktop:</p> <ol> <li> <p>Install Claude Desktop from Anthropic</p> </li> <li> <p>Ensure <code>uv</code> is installed:</p> </li> </ol> <pre><code># Install uv if you don't have it\n# MacOS: brew install uv\n# Windows: pip install uv\n</code></pre> <ol> <li> <p>Configure Claude Desktop:</p> </li> <li> <p>Open Claude Desktop settings</p> </li> <li>Navigate to Developer section</li> <li>Click \"Edit Config\" and add:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n    }\n  }\n}\n</code></pre> <ul> <li> <p>Save and restart Claude Desktop</p> </li> <li> <p>Start chatting with Claude about biomedical topics!</p> </li> </ul> <p>For detailed setup instructions and examples, see our Claude Desktop Tutorial.</p>"},{"location":"#what-is-biomcp","title":"What is BioMCP?","text":"<p>BioMCP is a specialized MCP (Model Context Protocol) server that bridges the gap between AI systems and critical biomedical data sources. While Large Language Models (LLMs) like Claude have extensive general knowledge, they often lack real-time access to specialized databases needed for in-depth biomedical research.</p> <p>Using the Model Context Protocol, BioMCP provides Claude and other AI assistants with structured, real-time access to:</p> <ol> <li>Clinical Trials - Searchable access to ClinicalTrials.gov for finding relevant studies</li> <li>Research Literature - Query PubMed/PubTator3 for the latest biomedical research</li> <li>Genomic Variants - Explore detailed genetic variant information from MyVariant.info</li> </ol> <p>Through MCP, AI assistants can seamlessly invoke BioMCP tools during conversations, retrieving precise biomedical information without the user needing to understand complex query syntax or database-specific parameters.</p>"},{"location":"#mcp-tools-and-capabilities","title":"MCP Tools and Capabilities","text":"<p>BioMCP exposes the following tools through the MCP interface:</p>"},{"location":"#clinical-trial-tools","title":"Clinical Trial Tools","text":"<ul> <li><code>trial_searcher</code>: Search for trials by condition, intervention, location, phase, etc.</li> <li><code>trial_protocol</code>: Get detailed protocol information for specific trials</li> <li><code>trial_locations</code>: Find where trials are conducted</li> <li><code>trial_outcomes</code>: Access trial results and outcome data</li> <li><code>trial_references</code>: Find publications related to specific trials</li> </ul>"},{"location":"#literature-tools","title":"Literature Tools","text":"<ul> <li><code>article_searcher</code>: Find biomedical articles across multiple dimensions</li> <li><code>article_details</code>: Retrieve detailed article content and metadata</li> </ul>"},{"location":"#genomic-tools","title":"Genomic Tools","text":"<ul> <li><code>variant_searcher</code>: Search for genetic variants with filtering options</li> <li><code>variant_details</code>: Get comprehensive annotations for specific variants</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>Claude Desktop Tutorial - Set up and use BioMCP with Claude Desktop</li> <li>MCP Inspector Tutorial - Test and debug BioMCP directly</li> <li>Python SDK Tutorial - Use BioMCP as a Python library</li> <li>MCP Client Tutorial - Integrate with MCP clients programmatically</li> </ul>"},{"location":"#verification-and-testing","title":"Verification and Testing","text":"<p>The easiest way to test your BioMCP setup is with the MCP Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre> <p>This launches a web interface where you can test each BioMCP tool directly. For detailed instructions, see the MCP Inspector Tutorial.</p>"},{"location":"#additional-usage-options","title":"Additional Usage Options","text":"<p>While BioMCP is primarily designed as an MCP server for AI assistants, it can also be used in other ways:</p>"},{"location":"#command-line-interface","title":"Command Line Interface","text":"<p>BioMCP includes a comprehensive CLI for direct interaction with biomedical databases:</p> <pre><code># Examples of CLI usage\nbiomcp trial search --condition \"Melanoma\" --phase PHASE3\nbiomcp article search --gene BRAF --disease Melanoma\nbiomcp variant search --gene TP53 --significance pathogenic\n</code></pre>"},{"location":"#python-sdk","title":"Python SDK","text":"<p>For programmatic access, BioMCP can be used as a Python library:</p> <pre><code># Install the package\npip install biomcp-python\n</code></pre> <p>See the Python SDK Tutorial for code examples.</p>"},{"location":"#mcp-client-integration","title":"MCP Client Integration","text":"<p>For developers building MCP-compatible applications, BioMCP can be integrated using the MCP client libraries. See the MCP Client Tutorial for details.</p>"},{"location":"#license","title":"License","text":"<p>BioMCP is licensed under the MIT License.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#011-2025-04-14","title":"[0.1.1] - 2025-04-14","text":"<ul> <li>Simplified <code>biomcp run</code>.</li> <li>Added tutorials on Claude Desktop, MCP Inspector, and Python SDK.</li> </ul>"},{"location":"changelog/#010-2025-04-08","title":"[0.1.0] - 2025-04-08","text":"<ul> <li>Initial release of BioMCP CLI and server.</li> <li>Support for searching ClinicalTrials.gov (<code>biomcp trial search</code>).</li> <li>Support for retrieving trial details (<code>biomcp trial get</code>).</li> <li>Support for searching PubMed/PubTator3 (<code>biomcp article search</code>).</li> <li>Support for retrieving article details (<code>biomcp article get</code>).</li> <li>Support for searching MyVariant.info (<code>biomcp variant search</code>).</li> <li>Support for retrieving variant details (<code>biomcp variant get</code>).</li> <li>Basic HTTP caching for API requests.</li> <li>Initial documentation structure.</li> </ul>"},{"location":"genomoncology/","title":"GenomOncology: Powering the Future of Precision Medicine","text":""},{"location":"genomoncology/#who-we-are","title":"Who We Are","text":"<p>GenomOncology is a leading healthcare technology company dedicated to transforming precision medicine through innovative genomic analysis solutions. We connect complex genomic data and actionable clinical insights, enabling healthcare providers to deliver personalized treatment strategies for cancer patients.</p>"},{"location":"genomoncology/#our-commitment-to-open-healthcare","title":"Our Commitment to Open Healthcare","text":"<p>We believe in the power of open source systems to further the impact of precision medicine. Through the BioMCP initiative we hope to engage the healthcare community in this open-access ecosystem designed to accelerate innovation in precision medicine. By evolving this open framework, we're moving to create a more collaborative, efficient, and transparent healthcare environment.</p>"},{"location":"genomoncology/#our-precision-oncology-platform","title":"Our Precision Oncology Platform","text":"<p>Today, our proprietary knowledge management system, known as the Precision Oncology Platform (POP), serves as the backbone of our solutions, continuously aggregating and curating the latest genomic research, clinical trials, and treatment guidelines. This system:</p> <ul> <li>Processes and harmonizes data from 40+ scientific and clinical sources</li> <li>Updates weekly to incorporate the newest research findings</li> <li>Utilizes advanced NLP to extract meaningful insights from unstructured text</li> <li>Maintains a comprehensive database of 25,000+ variant-drug associations</li> </ul>"},{"location":"genomoncology/#real-world-impact","title":"Real-World Impact","text":"<p>Our technology currently powers precision medicine programs at:</p> <ul> <li>120+ hospitals and cancer centers</li> <li>15 academic medical centers</li> <li>8 commercial reference laboratories</li> <li>10+ pharmaceutical research programs</li> </ul> <p>Processing over 100,000 genomic profiles monthly, our solutions have helped match thousands of patients to targeted therapies and clinical trials, significantly improving outcomes.</p>"},{"location":"genomoncology/#join-us-in-the-next-phase-of-transforming-healthcare","title":"Join Us In The Next Phase of Transforming Healthcare","text":"<p>By contributing to the BioMCP ecosystem, we're inviting developers to collaborate with us in creating the next generation of precision medicine tools. Whether you're looking to build applications that leverage genomic data, create integrations with existing healthcare systems, or explore novel approaches to biomarker analysis, GenomOncology provides the technological foundation to bring your ideas to life.</p>"},{"location":"genomoncology/#get-started","title":"Get Started","text":"<p>Ready to explore what's possible with GenomOncology and BioMCP?</p> <ul> <li>Clone our repositories on GitHub</li> <li>Register for API access</li> <li>Join our developer community</li> </ul> <p>Together, we can accelerate precision medicine through open collaboration and innovation.</p> <p>GenomOncology: Transforming data into treatment decisions</p>"},{"location":"apis/clinicaltrials_gov/","title":"ClinicalTrials.gov API","text":"<p>This document outlines the key aspects of the public ClinicalTrials.gov v2 API utilized by BioMCP. Understanding these details can be helpful for advanced users interpreting BioMCP results or for developers extending its capabilities. BioMCP's CLI commands often simplify or combine these parameters for ease of use; refer to the Trials CLI Documentation for specific command options.</p>"},{"location":"apis/clinicaltrials_gov/#overview","title":"Overview","text":"<p>The ClinicalTrials.gov API provides programmatic access to clinical trial information. This document outlines the API implementation details for searching and retrieving clinical trial data.</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Trials CLI Documentation.</p>"},{"location":"apis/clinicaltrials_gov/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/clinicaltrials_gov/#search-api","title":"Search API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies</code></p> <p>This endpoint allows searching for clinical trials using various parameters.</p>"},{"location":"apis/clinicaltrials_gov/#key-parameters","title":"Key Parameters","text":"Parameter Description Example Value <code>query.cond</code> \"Conditions or disease\" query <code>lung cancer</code> <code>query.term</code> \"Other terms\" query <code>AREA[LastUpdatePostDate]RANGE[2023-01-15,MAX]</code> <code>query.intr</code> \"Intervention/treatment\" query <code>Vemurafenib</code> <code>query.locn</code> \"Location terms\" query <code>New York</code> <code>query.titles</code> \"Title/acronym\" query <code>BRAF Melanoma</code> <code>query.outc</code> \"Outcome measure\" query <code>overall survival</code> <code>query.spons</code> \"Sponsor/collaborator\" query <code>National Cancer Institute</code> <code>query.lead</code> Searches in \"LeadSponsorName\" field <code>MD Anderson</code> <code>query.id</code> \"Study IDs\" query <code>NCT04267848</code> <code>filter.overallStatus</code> Comma-separated list of statuses <code>NOT_YET_RECRUITING,RECRUITING</code> <code>filter.geo</code> Geo-location filter <code>distance(39.0035707,-77.1013313,50mi)</code> <code>filter.ids</code> Filter by NCT IDs <code>NCT04852770,NCT01728545</code> <code>filter.advanced</code> Advanced filter query <code>AREA[StartDate]2022</code> <code>sort</code> Sort order <code>LastUpdatePostDate:desc</code> <code>fields</code> Fields to return <code>NCTId,BriefTitle,OverallStatus,HasResults</code> <p>| <code>countTotal</code> | Count total number of studies | <code>true</code> or <code>false</code> |</p>"},{"location":"apis/clinicaltrials_gov/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies?query.cond=Melanoma&amp;query.intr=BRAF\"\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#study-details-api","title":"Study Details API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies/{NCT_ID}</code></p> <p>This endpoint retrieves detailed information about a specific clinical trial.</p>"},{"location":"apis/clinicaltrials_gov/#example-request_1","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies/NCT04267848\"\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#response-modules","title":"Response Modules","text":"<p>The API response contains various modules of information:</p> <ul> <li>protocolSection: Basic study information, eligibility criteria, and   design</li> <li>resultsSection: Study outcomes and results (when available)</li> <li>documentSection: Related documents</li> <li>derivedSection: Derived data elements</li> <li>annotationsSection: Additional annotations</li> </ul>"},{"location":"apis/clinicaltrials_gov/#implementation-details","title":"Implementation Details","text":""},{"location":"apis/clinicaltrials_gov/#query-building","title":"Query Building","text":"<p>When constructing API queries, parameters must be properly formatted according to the API documentation.</p> <p>Example query creation:</p> <pre><code>def build_query_params(conditions=None, interventions=None, terms=None):\n    params = {}\n    if conditions:\n        params[\"query.cond\"] = \" \".join(conditions)\n    if interventions:\n        params[\"query.intr\"] = \" \".join(interventions)\n    if terms:\n        params[\"query.term\"] = \" \".join(terms)\n    return params\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#response-parsing","title":"Response Parsing","text":"<p>The API returns data in JSON format (or CSV if specified). Key sections in the response include:</p> <ul> <li><code>protocolSection</code>: Contains study protocol details</li> <li><code>identificationModule</code>: Basic identifiers including NCT ID and title</li> <li><code>statusModule</code>: Current recruitment status and study dates</li> <li><code>sponsorCollaboratorsModule</code>: Information about sponsors and     collaborators</li> <li><code>designModule</code>: Study design information including interventions</li> <li><code>eligibilityModule</code>: Inclusion/exclusion criteria and eligible population</li> <li><code>contactsLocationsModule</code>: Study sites and contact information</li> <li><code>referencesModule</code>: Related publications</li> </ul>"},{"location":"apis/clinicaltrials_gov/#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling is implemented for API responses:</p> <pre><code>def handle_api_response(response):\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 404:\n        raise ValueError(\"Trial not found\")\n    elif response.status_code == 429:\n        raise RateLimitExceeded(\"Rate limit exceeded, please try again later\")\n    else:\n        raise APIError(f\"API error: {response.status_code}\")\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#authentication","title":"Authentication","text":"<p>The ClinicalTrials.gov API is public and does not require authentication for basic usage. However, there are rate limits in place.</p>"},{"location":"apis/clinicaltrials_gov/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Rate Limit: Approximately 50 requests per minute per IP address</li> <li>Caching: Implement caching to minimize repeated requests</li> <li> <p>Pagination: For large result sets, use the pagination functionality with</p> </li> <li> <p>Focused Queries: Use specific search terms rather than broad queries to   get more relevant results</p> </li> <li>Field Selection: Use the fields parameter to request only the data you   need</li> </ul>"},{"location":"apis/clinicaltrials_gov/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the ClinicalTrials.gov API Documentation</p>"},{"location":"apis/myvariant_info/","title":"MyVariant.info API","text":"<p>This document details the MyVariant.info API, which BioMCP uses for fetching genetic variant annotations. Understanding the underlying API fields and query syntax can aid advanced users and developers working with BioMCP.</p>"},{"location":"apis/myvariant_info/#overview","title":"Overview","text":"<p>MyVariant.info is a comprehensive API that provides variant annotation information from multiple databases in a centralized location. This document outlines how to interface with this API to search for and retrieve information about genetic variants.</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Variants CLI Documentation.</p>"},{"location":"apis/myvariant_info/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/myvariant_info/#query-api","title":"Query API","text":"<p>Endpoint: <code>https://myvariant.info/v1/query</code></p> <p>This endpoint allows searching for variants using various query parameters.</p>"},{"location":"apis/myvariant_info/#key-query-parameters","title":"Key Query Parameters","text":"Parameter Description Example <code>q</code> Query string using field:value syntax <code>dbnsfp.genename:BRAF AND dbnsfp.hgvsp:p.V600E</code> <code>fields</code> Comma-separated list of fields to return <code>_id,dbsnp.rsid,dbnsfp.genename,clinvar.clinical_significance</code> <code>size</code> Number of hits to return <code>10</code> <code>from</code> Number of hits to skip <code>0</code> <code>sort</code> Sort by specified field <code>cadd.phred:desc</code>"},{"location":"apis/myvariant_info/#example-requests","title":"Example Requests","text":"<p>Full variant search:</p> <pre><code>curl -X GET \"https://myvariant.info/v1/query?q=dbnsfp.genename%3ABRAF%20AND%20dbnsfp.hgvsp%3Ap.V600E\"\n</code></pre> <p>Partial variant search (selected fields):</p> <pre><code>curl -X GET \"https://myvariant.info/v1/query?q=dbnsfp.genename%3ABRAF%20AND%20dbnsfp.hgvsp%3Ap.V600E&amp;fields=_id,dbsnp.rsid,dbnsfp.genename,clinvar.clinical_significance,cadd.phred,gnomad_exome.af.af,exac.af,mutdb\"\n</code></pre>"},{"location":"apis/myvariant_info/#variant-retrieval-api","title":"Variant Retrieval API","text":"<p>Endpoint: <code>https://myvariant.info/v1/variant/{variant_id}</code></p> <p>This endpoint retrieves detailed information about a specific variant using its ID.</p> <p>Example:</p> <pre><code>curl -X GET \"https://myvariant.info/v1/variant/chr7:g.140453136A&gt;T\"\n</code></pre>"},{"location":"apis/myvariant_info/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"apis/myvariant_info/#query-construction","title":"Query Construction","text":"<p>Constructing effective queries requires understanding the field structure. The most common query patterns include:</p> <ol> <li>Gene + Variant: <code>dbnsfp.genename:BRAF AND dbnsfp.hgvsp:p.V600E</code></li> <li>dbSNP ID: <code>dbsnp.rsid:rs113488022</code></li> <li>Chromosome Position: <code>_id:chr7:g.140453136A&gt;T</code></li> </ol> <p>Code example for query building:</p> <pre><code>def build_variant_query(gene=None, protein_change=None, rsid=None):\n    query_parts = []\n\n    if gene:\n        query_parts.append(f\"dbnsfp.genename:{gene}\")\n    if protein_change:\n        query_parts.append(f\"dbnsfp.hgvsp:{protein_change}\")\n    if rsid:\n        query_parts.append(f\"dbsnp.rsid:{rsid}\")\n\n    return \" AND \".join(query_parts)\n</code></pre>"},{"location":"apis/myvariant_info/#response-parsing","title":"Response Parsing","text":"<p>The API returns data in JSON format. Example response structure for a variant:</p> <pre><code>{\n  \"took\": 5,\n  \"total\": 1,\n  \"max_score\": 26.326775,\n  \"hits\": [\n    {\n      \"_id\": \"chr7:g.140453136A&gt;T\",\n      \"_score\": 26.326775,\n      \"cadd\": {\n        \"_license\": \"http://bit.ly/2TIuab9\",\n        \"phred\": 32\n      },\n      \"dbnsfp\": {\n        \"_license\": \"http://bit.ly/2VLnQBz\",\n        \"genename\": [\"BRAF\", \"BRAF\", \"BRAF\", \"BRAF\"]\n      },\n      \"dbsnp\": {\n        \"_license\": \"http://bit.ly/2AqoLOc\",\n        \"rsid\": \"rs113488022\"\n      },\n      \"exac\": {\n        \"_license\": \"http://bit.ly/2H9c4hg\",\n        \"af\": 0.00001647\n      },\n      \"gnomad_exome\": {\n        \"_license\": \"http://bit.ly/2I1cl1I\",\n        \"af\": {\n          \"af\": 0.00000397994\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/myvariant_info/#data-fields","title":"Data Fields","text":"<p>The API provides rich variant annotation data from multiple sources, including:</p> <ol> <li> <p>Basic Information:</p> </li> <li> <p><code>_id</code>: Variant ID in HGVS format (e.g., <code>chr7:g.140453136A&gt;T</code>)</p> </li> <li> <p><code>dbsnp.rsid</code>: dbSNP RS identifier (e.g., <code>rs113488022</code>)</p> </li> <li> <p>Functional Impact Scores:</p> </li> <li> <p><code>cadd.phred</code>: CADD Phred score for variant deleteriousness</p> </li> <li> <p><code>mutpred_score</code>: MutPred score for amino acid substitutions</p> </li> <li> <p>Population Frequency:</p> </li> <li> <p><code>gnomad_exome.af.af</code>: Frequency in gnomAD exome dataset</p> </li> <li> <p><code>exac.af</code>: Frequency in ExAC dataset</p> </li> <li> <p>Clinical Significance:</p> </li> <li> <p><code>clinvar.clinical_significance</code>: Clinical significance from ClinVar</p> </li> <li> <p>Gene Information:</p> </li> <li><code>dbnsfp.genename</code>: Associated gene name(s)</li> </ol>"},{"location":"apis/myvariant_info/#authentication-and-rate-limits","title":"Authentication and Rate Limits","text":"<p>The MyVariant.info API is public and does not require authentication for basic usage, but there are rate limits:</p> <ul> <li>Anonymous Access: Limited to 1,000 requests per IP per day</li> <li>Registered Access: Higher limits available with a free API key</li> <li>Batch Queries: Limited to 1,000 variants per request</li> </ul>"},{"location":"apis/myvariant_info/#best-practices","title":"Best Practices","text":"<ol> <li>Use Specific Queries: Target exact genes, variants, or identifiers</li> <li>Limit Returned Fields: Use the <code>fields</code> parameter to request only needed    data</li> <li>Implement Caching: Cache frequently accessed variant data</li> <li>Handle Errors Robustly: Implement retry logic and proper error handling</li> <li>Batch Requests: When possible, use batch endpoints for multiple variants</li> </ol>"},{"location":"apis/myvariant_info/#search-parameters","title":"Search Parameters","text":"<p>The following are the prioritized list of commonly used attributes for searching MyVariant data:</p>"},{"location":"apis/myvariant_info/#1-gene-symbol","title":"1. Gene Symbol","text":"<ul> <li>Description: Most common approach to find all known variants in a gene</li> <li>Query Syntax: <code>dbnsfp.genename:&lt;GENE&gt;</code></li> <li>Example: <code>q=dbnsfp.genename:TP53</code></li> </ul>"},{"location":"apis/myvariant_info/#2-cdna-notation","title":"2. cDNA Notation","text":"<ul> <li>Description: Search by cDNA expression</li> <li>Query Syntax: <code>dbnsfp.hgvsc:&lt;CDNA_EXPRESSION&gt;</code></li> <li>Example: <code>q=dbnsfp.hgvsc:c.1799T&gt;A</code></li> </ul>"},{"location":"apis/myvariant_info/#3-protein-p-notation","title":"3. Protein (p.) Notation","text":"<ul> <li>Description: Search by protein-level notation</li> <li>Query Syntax: <code>dbnsfp.hgvsp:&lt;PROTEIN_EXPRESSION&gt;</code></li> <li>Example: <code>q=dbnsfp.hgvsp:p.V600E</code></li> </ul>"},{"location":"apis/myvariant_info/#4-genomic-region","title":"4. Genomic Region","text":"<ul> <li>Description: Find all variants in a coordinate range</li> <li>Query Syntax: <code>chr&lt;NUM&gt;:&lt;START&gt;-&lt;END&gt;</code></li> <li>Example: <code>q=chr7:140453100-140453200</code></li> <li>With Additional Filters:   <code>q=chr7:140453100-140453200 AND dbnsfp.genename:BRAF</code></li> </ul>"},{"location":"apis/myvariant_info/#5-dbsnp-rsid","title":"5. dbSNP rsID","text":"<ul> <li>Description: Lookup by rsID</li> <li>Query Syntax: <code>dbsnp.rsid:&lt;RSID&gt;</code></li> <li>Example: <code>q=dbsnp.rsid:rs113488022</code></li> </ul>"},{"location":"apis/myvariant_info/#6-clinvar-significance","title":"6. ClinVar Significance","text":"<ul> <li>Description: Filter by clinical significance</li> <li>Query Syntax: <code>clinvar.clinical_significance:&lt;VALUE&gt;</code></li> <li>Example: <code>q=clinvar.clinical_significance:Pathogenic</code></li> <li>Multiple Values:   <code>q=clinvar.clinical_significance:(Pathogenic OR Likely_pathogenic)</code></li> </ul>"},{"location":"apis/myvariant_info/#7-population-frequency","title":"7. Population Frequency","text":"<ul> <li>Description: Filter by rarity or commonality</li> <li>Query Syntax: <code>gnomad_exome.af:&lt;THRESHOLD&gt;</code> or   <code>exac.af:&lt;OPERATOR&gt;&lt;THRESHOLD&gt;</code></li> <li>Example: <code>q=gnomad_exome.af:&lt;0.001</code> or <code>q=exac.af:&gt;=0.01</code></li> </ul>"},{"location":"apis/myvariant_info/#8-functional-predictions","title":"8. Functional Predictions","text":"<ul> <li>Description: Filter by prediction scores</li> <li>CADD: <code>q=cadd.phred:&gt;15</code></li> <li>PolyPhen: <code>q=dbnsfp.polyphen2.hdiv.pred:probably_damaging</code> or   <code>q=dbnsfp.polyphen2.hdiv.score:&gt;0.9</code></li> <li>SIFT: <code>q=dbnsfp.sift.pred:deleterious</code> or <code>q=dbnsfp.sift.score:&lt;0.05</code></li> </ul>"},{"location":"apis/myvariant_info/#9-cosmic-id","title":"9. COSMIC ID","text":"<ul> <li>Description: Search by COSMIC mutation IDs</li> <li>Query Syntax: <code>cosmic.cosmic_id:&lt;ID&gt;</code> or <code>mutdb.cosmic_id:&lt;ID&gt;</code></li> <li>Example: <code>q=cosmic.cosmic_id:476</code></li> </ul>"},{"location":"apis/myvariant_info/#10-combining-multiple-filters","title":"10. Combining Multiple Filters","text":"<ul> <li>Description: Combine conditions for precise searches</li> <li>Example: <code>q=dbnsfp.genename:BRAF AND cadd.phred:&gt;=20 AND exac.af:&lt;0.001</code></li> </ul>"},{"location":"apis/myvariant_info/#query-fields-reference-table","title":"Query Fields Reference Table","text":"Attribute MyVariant Field / Query Expression Gene Symbol <code>dbnsfp.genename:&lt;GENE&gt;</code> cDNA Notation <code>dbnsfp.hgvsc:&lt;NOTATION&gt;</code> Protein Notation <code>dbnsfp.hgvsp:&lt;NOTATION&gt;</code> Genomic Region <code>chr7:140453100-140453200</code> (substitute correct chr, start, end) dbSNP rsID <code>dbsnp.rsid:&lt;RSID&gt;</code> ClinVar Significance <code>clinvar.clinical_significance:&lt;VALUE&gt;</code> GnomAD / ExAC Frequency <code>gnomad_exome.af:&lt;FLOAT&gt;</code> / <code>exac.af:&gt;FLOAT</code> CADD PHRED Score <code>cadd.phred:&gt;FLOAT</code> (or <code>&lt;, &gt;=, &lt;=</code>) PolyPhen2 Prediction <code>dbnsfp.polyphen2.hdiv.pred:(D OR P)</code> or <code>dbnsfp.polyphen2.hdiv.score:&gt;X</code> SIFT <code>dbnsfp.sift.pred:deleterious</code> / <code>dbnsfp.sift.score:&lt;0.05</code> COSMIC ID <code>cosmic.cosmic_id:&lt;ID&gt;</code> or <code>mutdb.cosmic_id:&lt;ID&gt;</code>"},{"location":"apis/myvariant_info/#data-integration","title":"Data Integration","text":"<p>The Variants endpoint can be used to find variants based on their genomic location (chr, start, ref, alt), converting to Gene and Protein change (HGVS) and used to search Trials and Articles. This provides a powerful way to link genetic information with clinical trials and literature.</p>"},{"location":"apis/myvariant_info/#output-format","title":"Output Format","text":"<p>For the API implementation, all data is typically returned in JSON format. BioMCP CLI commands render this data as Markdown by default (unless <code>--json</code> is specified).</p> <p>When using the <code>biomcp variant search</code> command, a curated set of important fields (defined internally, plus those requested via <code>--sources</code>) is requested from the API to provide a concise summary.</p> <p>When using the <code>biomcp variant get</code> command to retrieve a specific variant, BioMCP requests <code>fields=all</code> from the MyVariant.info API to get the most comprehensive data available for that variant, and then injects relevant database links.</p>"},{"location":"apis/myvariant_info/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the MyVariant.info Documentation.</p>"},{"location":"apis/myvariant_info/#urls","title":"URLs","text":"Website/Database Identifier Used Data Field(s) in API Response URL Construction Pattern Placement/Notes dbSNP rsID <code>dbsnp.rsid</code> <code>https://www.ncbi.nlm.nih.gov/snp/&lt;rsID&gt;</code> Standard link for SNP information. Include if rsID exists. ClinVar (Variant) ClinVar Variation ID <code>clinvar.variation_id</code> <code>https://www.ncbi.nlm.nih.gov/clinvar/variation/&lt;VariationID&gt;/</code> Links to the variant page in ClinVar. Include if Variation ID exists. ClinVar (Interpretation) ClinVar RCV Accession <code>clinvar.rcv.accession</code> <code>https://www.ncbi.nlm.nih.gov/clinvar/rcv/&lt;RCV Accession&gt;/</code> Links to a specific interpretation record. Include if RCV Accession exists. COSMIC COSMIC ID (Numeric) <code>cosmic.cosmic_id</code> <code>https://cancer.sanger.ac.uk/cosmic/mutation/overview?id=&lt;COSMIC_ID_number&gt;</code> Links to the mutation in COSMIC. Extract only the number from the COSMIC ID (e.g., from <code>COSM12345</code>, use <code>12345</code>). Include if COSMIC ID exists. CIViC CIViC Variant ID <code>civic.id</code> or <code>civic.variant_id</code> <code>https://civicdb.org/variants/&lt;CIVIC_Variant_ID&gt;/summary</code> Links to the variant summary in CIViC. Include if CIViC ID exists. Ensembl rsID or Ensembl ID <code>dbsnp.rsid</code> or <code>ensembl.variant.id</code> <code>https://ensembl.org/Homo_sapiens/Variation/Explore?v=&lt;rsID&gt;</code> (preferred if rsID exists) Links to the variant in Ensembl. Prioritize using rsID if available. UCSC Genome Browser Genomic Coordinates <code>chrom</code>, <code>vcf.pos</code> (or <code>hg19.start</code>, <code>hg38.start</code>) <code>https://genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&amp;position=&lt;chr&gt;:&lt;start&gt;-&lt;end&gt;</code> Links to the genomic region. Construct <code>start</code>/<code>end</code> around <code>vcf.pos</code>. Check genome build (hg38 is current, hg19 might be needed for older data). Requires chromosome and position. HGNC (Gene Link) Gene Symbol <code>dbnsfp.genename</code> <code>https://www.genenames.org/data/gene-symbol-report/#!/symbol/&lt;GeneSymbol&gt;</code> Links to the associated gene's official nomenclature page. Useful context."},{"location":"apis/pubtator3_api/","title":"PubTator3 API","text":"<p>This document describes the PubTator3 API used by BioMCP for searching biomedical literature and retrieving article details with annotations. Understanding this API provides context for how BioMCP's article commands function.</p>"},{"location":"apis/pubtator3_api/#overview","title":"Overview","text":"<p>The PubTator3 API provides a way to search for and retrieve biomedical articles with entity annotations. This document outlines the API implementation details. PubTator3 is a web-based tool that provides annotations of biomedical entities in PubMed abstracts and PMC full-text articles. BioMCP uses the PubTator3 API to search for and retrieve biomedical articles and their annotated entities ( genes, variants, diseases, chemicals, etc.).</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Articles CLI Documentation.</p>"},{"location":"apis/pubtator3_api/#api-workflow","title":"API Workflow","text":"<p>The PubTator3 integration follows a three-step workflow:</p> <ol> <li>Entity Autocomplete: Get standardized entity identifiers</li> <li>Search: Find articles using entity identifiers and keywords</li> <li>Fetch: Retrieve full article details by PMID</li> </ol>"},{"location":"apis/pubtator3_api/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/pubtator3_api/#entity-autocomplete-api","title":"Entity Autocomplete API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/</code></p> <p>This endpoint helps normalize entity names to their standard identifiers, improving search precision.</p>"},{"location":"apis/pubtator3_api/#parameters","title":"Parameters","text":"Parameter Description Example <code>query</code> Text to autocomplete <code>BRAF</code> <code>concept</code> Entity type <code>GENE</code>, <code>CHEMICAL</code>, <code>DISEASE</code>, etc. <code>limit</code> Number of results to return <code>2</code>"},{"location":"apis/pubtator3_api/#example-request-and-response","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/?query=BRAF&amp;concept=GENE&amp;limit=2\"\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"_id\": \"@GENE_BRAF\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAF\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAF&lt;/m&gt;\"\n  },\n  {\n    \"_id\": \"@GENE_BRAFP1\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAFP1\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAFP1&lt;/m&gt;\"\n  }\n]\n</code></pre>"},{"location":"apis/pubtator3_api/#entity-search-api","title":"Entity Search API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/</code></p> <p>This endpoint allows searching for PMIDs (PubMed IDs) based on entity identifiers and keywords.</p>"},{"location":"apis/pubtator3_api/#parameters_1","title":"Parameters","text":"Parameter Description Example <code>text</code> Entity identifier or text query <code>@CHEMICAL_remdesivir</code>"},{"location":"apis/pubtator3_api/#example-request-and-response_1","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/?text=@CHEMICAL_remdesivir\"\n</code></pre> <p>Response (truncated):</p> <pre><code>{\n  \"results\": [\n    {\n      \"_id\": \"37711410\",\n      \"pmid\": 37711410,\n      \"title\": \"Remdesivir.\",\n      \"journal\": \"Hosp Pharm\",\n      \"authors\": [\"Levien TL\", \"Baker DE\"],\n      \"date\": \"2023-10-01T00:00:00Z\",\n      \"doi\": \"10.1177/0018578721999804\",\n      \"meta_date_publication\": \"2023 Oct\",\n      \"meta_volume\": \"58\"\n    }\n    // More results...\n  ]\n}\n</code></pre>"},{"location":"apis/pubtator3_api/#article-fetch-api","title":"Article Fetch API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson</code></p> <p>This endpoint retrieves detailed information about specific articles, including annotations.</p>"},{"location":"apis/pubtator3_api/#parameters_2","title":"Parameters","text":"Parameter Description Example <code>pmids</code> List of PubMed IDs to retrieve <code>29355051</code> <code>full_text</code> Whether to include full text (when available) <code>true</code>"},{"location":"apis/pubtator3_api/#example-request","title":"Example Request","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson?pmids=29355051&amp;full=true\"\n</code></pre> <p>Response format (truncated):</p> <pre><code>{\n  \"PubTator3\": [\n    {\n      \"_id\": \"29355051|PMC6142073\",\n      \"id\": \"6142073\",\n      \"infons\": {},\n      \"passages\": [\n        {\n          \"infons\": {\n            \"name_3\": \"surname:Hu;given-names:Minghua\",\n            \"name_2\": \"surname:Luo;given-names:Xia\",\n            \"name_1\": \"surname:Luo;given-names:Shuang\",\n            \"article-id_pmid\": \"29355051\"\n            // More metadata...\n          }\n        }\n        // More passages...\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/pubtator3_api/#entity-types","title":"Entity Types","text":"<p>PubTator3 annotates several types of biomedical entities:</p> <ol> <li>Genes/Proteins: Gene or protein names (e.g., BRAF, TP53)</li> <li>Genetic Variants: Genetic variations (e.g., BRAF V600E)</li> <li>Diseases: Disease names and conditions (e.g., Melanoma)</li> <li>Chemicals/Drugs: Chemical substances or drugs (e.g., Vemurafenib)</li> </ol>"},{"location":"apis/pubtator3_api/#integration-strategy-for-biomcp","title":"Integration Strategy for BioMCP","text":"<p>The recommended workflow for integrating with PubTator3 in BioMCP is:</p> <ol> <li>Entity Normalization: Use the autocomplete API to convert user-provided    entity names to standardized identifiers</li> <li>Literature Search: Use the search API with these identifiers to find    relevant PMIDs</li> <li>Data Retrieval: Fetch detailed article data with annotations using the    fetch API</li> </ol> <p>This workflow ensures consistent entity handling and optimal search results.</p>"},{"location":"apis/pubtator3_api/#authentication","title":"Authentication","text":"<p>The PubTator3 API is public and does not require authentication for basic usage. However, there are rate limits in place to prevent abuse.</p>"},{"location":"apis/pubtator3_api/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Request Limits: Approximately 30 requests per minute</li> <li>Batch Requests: For article retrieval, batch multiple PMIDs in a single   request</li> <li>Caching: Implement caching to minimize repeated requests</li> <li>Specific Queries: Use specific entity names rather than general terms for   better results</li> </ul>"},{"location":"apis/pubtator3_api/#error-handling","title":"Error Handling","text":"<p>Common error responses:</p> <ul> <li>400: Invalid parameters</li> <li>404: Articles not found</li> <li>429: Rate limit exceeded</li> <li>500: Server error</li> </ul>"},{"location":"apis/pubtator3_api/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the PubTator3 API Documentation.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/","title":"AI-Assisted Clinical Trial Search: How BioMCP Transforms Research","text":"<p>Finding the right clinical trial for a research project has traditionally been a complex process requiring specialized knowledge of database syntax and medical terminology. BioMCP is changing this landscape by making clinical trial data accessible through natural language conversation.</p> <p>Video Link: </p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#breaking-down-the-barriers-to-clinical-trial-information","title":"Breaking Down the Barriers to Clinical Trial Information","text":"<p>BioMCP serves as a specialized Model Context Protocol (MCP) server that empowers AI assistants and agents with tools to interact with critical biomedical resources. For clinical trials specifically, BioMCP connects to the ClinicalTrials.gov API, allowing researchers and clinicians to search and retrieve trial information through simple conversational queries.</p> <p>The power of this approach becomes apparent when we look at how it transforms a complex search requirement. Imagine needing to find active clinical trials for pembrolizumab (a cancer immunotherapy drug) specifically for non-small cell lung carcinoma near Cleveland, Ohio. Traditionally, this would require:</p> <ol> <li>Navigating to ClinicalTrials.gov</li> <li>Understanding the proper search fields and syntax</li> <li>Creating multiple filters for intervention (pembrolizumab), condition (    non-small cell lung carcinoma), status (recruiting), and location (Cleveland    area)</li> <li>Interpreting the results</li> </ol>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#from-natural-language-to-precise-database-queries","title":"From Natural Language to Precise Database Queries","text":"<p>With BioMCP, this entire process is streamlined into a simple natural language request. The underlying large language model (LLM) interprets the query, identifies the key entities (drug name, cancer type, location), and translates these into the precise parameters needed for the ClinicalTrials.gov API.</p> <p>The system returns relevant trials that match all criteria, presenting them in an easy-to-understand format. But the interaction doesn't end there\u2014BioMCP maintains context throughout the conversation, enabling follow-up questions like:</p> <ul> <li>Where exactly are these trials located and how far are they from downtown   Cleveland?</li> <li>What biomarker eligibility criteria do these trials require?</li> <li>Are there exclusion criteria I should be aware of?</li> </ul> <p>For each of these questions, BioMCP calls the appropriate tool (trial locations, trial protocols) and processes the information to provide meaningful answers without requiring the user to navigate different interfaces or learn new query languages.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#beyond-basic-search-understanding-trial-details","title":"Beyond Basic Search: Understanding Trial Details","text":"<p>What truly sets BioMCP apart is its ability to go beyond simple listings. When asked about biomarker eligibility criteria, the system can extract this information from the full trial protocol, synthesize it, and present a clear summary of requirements. This capability transforms what would typically be hours of reading dense clinical documentation into a conversational exchange that delivers precisely what the researcher needs.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#transforming-clinical-research-workflows","title":"Transforming Clinical Research Workflows","text":"<p>The implications for clinical research are significant. By lowering the technical barriers to accessing trial information, BioMCP can help:</p> <ul> <li>Researchers understand the landscape of current research in their field</li> <li>Research teams identify promising studies more efficiently</li> <li>Clinical research organizations track competing or complementary trials</li> <li>Research coordinators identify potential recruitment sites based on location</li> </ul> <p>As part of the broader BioMCP ecosystem\u2014which also includes access to genomic variant information and PubMed literature\u2014this clinical trial search capability represents a fundamental shift in how we interact with biomedical information. By bringing the power of natural language processing to specialized databases, BioMCP is helping to democratize access to critical health information and accelerate the research process.</p>"},{"location":"blog/researcher-persona-resource/","title":"BioMCP Deep Researcher Persona","text":"<p>With the release of BioMCP v0.1.2, users can now access a specialized Researcher Persona that transforms Claude into a rigorous biomedical research assistant via the Sequential Thinking MCP.</p> <p>This persona is designed to leverage BioMCP's suite of tools for accessing PubMed articles, ClinicalTrials.gov data, and genomic variant information, while incorporating Claude's web search capabilities to produce comprehensive, thoroughly-researched reports.</p>"},{"location":"blog/researcher-persona-resource/#how-to-use-the-researcher-persona","title":"How to Use the Researcher Persona","text":"<p>Getting started with the BioMCP Researcher Persona is straightforward:</p> <ol> <li>Configure Claude Desktop by updating your configuration JSON with:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python&gt;=0.1.2\", \"biomcp\", \"run\"]\n    },\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-sequential-thinking\"]\n    }\n  }\n}\n</code></pre> <ol> <li> <p>Restart Claude Desktop (the <code>&gt;=0.1.2</code> ensures the latest version is used)</p> </li> <li> <p>Select the \"Researcher\" persona from the dropdown menu    </p> </li> <li> <p>Ask your biomedical research question</p> </li> </ol> <p>The Researcher Persona will then work through its 10-step process, keeping you updated on its progress and ultimately producing a comprehensive research brief.</p>"},{"location":"blog/researcher-persona-resource/#video-demonstration","title":"Video Demonstration","text":"<p>Below is a video demonstrating the Researcher Persona in action:</p> <p></p>"},{"location":"blog/researcher-persona-resource/#sequential-thinking-a-rigorous-10-step-research-process","title":"Sequential Thinking: A Rigorous 10-Step Research Process","text":"<p>What makes the Researcher Persona so powerful is its integration with the Sequential Thinking MCP tool, which guides the AI through a comprehensive 10-step research methodology:</p> <ol> <li>Topic Scoping &amp; Domain Framework: Creating a comprehensive structure to    ensure complete coverage</li> <li>Initial Information Gathering: Establishing baseline terminology and    recent developments</li> <li>Focused &amp; Frontier Retrieval: Filling knowledge gaps and identifying    cutting-edge developments</li> <li>Primary Trials Analysis: Identifying and analyzing key clinical trials</li> <li>Primary Literature Analysis: Identifying and analyzing pivotal    publications</li> <li>Initial Evidence Synthesis: Creating a preliminary framework of findings</li> <li>Integrated Gap-Filling: Addressing identified knowledge gaps</li> <li>Comprehensive Evidence Synthesis: Creating a final integrated framework    with quality assessment</li> <li>Self-Critique and Verification: Rigorously assessing the quality and    comprehensiveness</li> <li>Research Brief Creation: Producing the final deliverable with all     required elements</li> </ol> <p></p> <p>This structured approach ensures that no important aspects of the research question are overlooked and that the final output is comprehensive, well-organized, and backed by current evidence.</p>"},{"location":"blog/researcher-persona-resource/#put-to-the-test-emerging-treatment-strategies-for-head-and-neck-cancer","title":"Put to the Test: Emerging Treatment Strategies for Head and Neck Cancer","text":"<p>To evaluate the effectiveness of the Researcher Persona, we conducted a head-to-head comparison with other AI research approaches. We asked the same question to five different systems: \"What are the emerging treatment strategies for head and neck cancer?\"</p> <p>The results were impressive. The BioMCP-powered Researcher Persona, combined with Claude's web search capabilities and the Sequential Thinking tool, produced the highest-rated research brief among all approaches tested.</p> <p></p> <p>The research brief produced by the BioMCP Researcher Persona stood out for several reasons:</p> <ol> <li>Comprehensive domain coverage: The report covered all relevant treatment    modalities (immunotherapy, targeted therapy, radiation techniques, surgery,    combination approaches)</li> <li>Structured evidence categorization: Findings were clearly organized by    level of evidence (Established, Emerging, Experimental, Theoretical)</li> <li>Evidence quality assessment: The brief included critical evaluation of    source quality and evidence strength</li> <li>Thorough citation: All claims were backed by specific references to    scientific literature or clinical trials</li> <li>Self-critique: The report included transparent limitations and    identified areas requiring further research</li> </ol>"},{"location":"blog/researcher-persona-resource/#explore-the-example-and-evaluations","title":"Explore the Example and Evaluations","text":"<p>We've documented this comparison in detail in the biomcp-examples repository, where you can find:</p> <ul> <li>The full research briefs produced by each approach</li> <li>Independent evaluations by three different AI judges (Claude 3.7, Gemini 2.5   Pro, and OpenAI o3)</li> <li>Detailed scoring against a rubric that prioritizes accuracy, clarity, and   comprehensiveness</li> <li>Analysis of strengths and weaknesses of each approach</li> </ul> <p>The consensus among the judges placed the BioMCP-powered brief at the top, highlighting its exceptional structure, evidence-based approach, and comprehensive coverage.</p>"},{"location":"blog/researcher-persona-resource/#beyond-the-example-wide-ranging-applications","title":"Beyond the Example: Wide-Ranging Applications","text":"<p>While our example focused on head and neck cancer treatments, the BioMCP Researcher Persona can tackle a wide range of biomedical research questions:</p> <ul> <li>Therapeutic comparisons: \"Compare the efficacy and safety profiles of JAK   inhibitors versus biologics for treating rheumatoid arthritis\"</li> <li>Disease mechanisms: \"What is the current understanding of gut microbiome   dysbiosis in inflammatory bowel disease?\"</li> <li>Biomarker investigations: \"What emerging biomarkers show promise for   early detection of pancreatic cancer?\"</li> <li>Treatment protocols: \"What are the latest guidelines for managing   anticoagulation in patients with atrial fibrillation and chronic kidney   disease?\"</li> </ul>"},{"location":"blog/researcher-persona-resource/#join-the-biomcp-community","title":"Join the BioMCP Community","text":"<p>The Researcher Persona is just one example of how BioMCP is transforming AI-assisted biomedical research. We invite you to:</p> <ol> <li>Try the Researcher Persona with your own research questions</li> <li>Contribute to    the biomcp-examples repository    with your experiments</li> <li>Share your feedback and suggestions for future improvements</li> </ol> <p>By combining specialized biomedical data access with structured research methodologies, BioMCP is helping researchers produce more comprehensive, accurate, and useful biomedical research briefs than ever before.</p> <p>Have a complex biomedical research question? Give the BioMCP Researcher Persona a try and experience the difference a structured, tool-powered approach can make!</p>"},{"location":"blog/what-is-biomcp/","title":"What is BioMCP?","text":"<p>In the rapidly evolving landscape of artificial intelligence, the power of large language models (LLMs) like ChatGPT and Claude has transformed how we interact with information. However, these models face a significant limitation: without context, they remain static and incomplete, especially in complex domains like healthcare and biomedical research.</p> <p>This is where BioMCP comes in \u2013 an open-source implementation of the Model Context Protocol (MCP) specifically designed for biomedical applications. But what exactly does that mean, and why does it matter?</p> <p>Video Link: </p>"},{"location":"blog/what-is-biomcp/#bridging-the-gap-between-ai-and-specialized-knowledge","title":"Bridging the Gap Between AI and Specialized Knowledge","text":"<p>BioMCP serves as a crucial bridge connecting AI assistants and agents to specialized biomedical data sources. While LLMs have been trained on vast amounts of public data and now have web search capabilities, they often lack the specialized context needed for biomedical research.</p> <p>The Model Context Protocol, recently released by Anthropic, has emerged as a standard for empowering LLMs with tools, resources, and prompts. BioMCP builds on this foundation, creating a specialized toolbox that enables AI systems to access and interpret complex biomedical information through natural language conversation.</p>"},{"location":"blog/what-is-biomcp/#what-can-biomcp-access","title":"What Can BioMCP Access?","text":"<p>BioMCP provides seamless connections to three critical biomedical resources:</p> <ol> <li> <p>Clinical Trials - Through the ClinicalTrials.gov API, researchers can    discover active trials for specific drugs, diseases, or locations. The AI    assistant parses natural language queries into structured search parameters,    retrieving and explaining relevant trials.</p> </li> <li> <p>Genomic Variants - Using the MyVariant.info API, BioMCP enables rich    filtering, sorting, and identification of specific genomic variants, making    complex genomic data accessible through conversation.</p> </li> <li> <p>Research Literature - BioMCP connects to PubMed through PubTator3, which    excels at recognizing biomedical entities like drugs, diseases, genes, and    variants, dramatically improving search relevance and retrieval.</p> </li> </ol>"},{"location":"blog/what-is-biomcp/#how-does-it-transform-research","title":"How Does It Transform Research?","text":"<p>What makes BioMCP particularly powerful is its conversational nature. A researcher might begin with a simple question about a disease, then naturally progress to exploring related clinical trials, and finally investigate genetic variants that affect treatment efficacy\u2014all within a single, flowing conversation.</p> <p>The system remembers context throughout the interaction, allowing for natural follow-up questions and a research experience that mirrors how scientists actually work. Instead of requiring researchers to master complex query languages for each database, BioMCP translates natural language into the precise syntax each system requires.</p>"},{"location":"blog/what-is-biomcp/#why-this-matters","title":"Why This Matters","text":"<p>BioMCP represents a significant advancement in making specialized biomedical knowledge accessible. For researchers and clinicians, it means spending less time wrestling with complex database interfaces and more time advancing their work. For the broader field of AI in healthcare, it demonstrates how specialized knowledge domains can be made accessible through conversation.</p> <p>As both AI assistants (synchronous conversation partners) and AI agents ( autonomous systems working toward goals over time) continue to evolve, tools like BioMCP will be essential in connecting these systems to the specialized knowledge they need to deliver meaningful insights in complex domains.</p> <p>By open-sourcing BioMCP, we're inviting the community to build upon this foundation, creating more powerful and accessible tools for biomedical research and ultimately accelerating the pace of scientific discovery.</p>"},{"location":"cli/articles/","title":"Articles CLI Documentation","text":"<p>The Articles CLI module provides commands for searching and retrieving biomedical research articles using the PubTator3 API.</p> <p>API Documentation: For details about the underlying API, see the PubTator3 API Documentation.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp article search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/articles/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for biomedical research articles based on various filters.</p>"},{"location":"cli/articles/#usage","title":"Usage","text":"<pre><code>biomcp article search [OPTIONS]\n</code></pre>"},{"location":"cli/articles/#options","title":"Options","text":"<ul> <li><code>-g, --gene TEXT</code>: Gene name to search for (e.g., BRAF). Can be specified multiple times.</li> <li><code>-v, --variant TEXT</code>: Genetic variant to search for (e.g., \"BRAF V600E\"). Can be specified multiple times.</li> <li><code>-d, --disease TEXT</code>: Disease name to search for (e.g., Melanoma). Can be specified multiple times.</li> <li><code>-c, --chemical TEXT</code>: Chemical or drug name to search for (e.g., Vemurafenib). Can be specified multiple times.</li> <li><code>-k, --keyword TEXT</code>: Additional keyword to search for. Can be specified multiple times.</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/articles/#examples","title":"Examples","text":"<p>Search for articles about the BRAF gene:</p> <pre><code>biomcp article search --gene BRAF\n</code></pre> <p>Search for articles about the BRAF V600E mutation in melanoma:</p> <pre><code>biomcp article search --gene BRAF --variant \"BRAF V600E\" --disease Melanoma\n</code></pre> <p>Search with multiple gene filters:</p> <pre><code>biomcp article search --gene BRAF --gene KRAS --disease Melanoma\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp article search --gene BRAF --json\n</code></pre>"},{"location":"cli/articles/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information (abstract, metadata) for specific articles using their PubMed IDs (PMIDs).</p>"},{"location":"cli/articles/#usage_1","title":"Usage","text":"<pre><code>biomcp article get [OPTIONS] PMIDS...\n</code></pre>"},{"location":"cli/articles/#arguments","title":"Arguments","text":"<ul> <li><code>PMIDS</code>: One or more PubMed IDs (integers) of the articles to retrieve. [required]</li> </ul>"},{"location":"cli/articles/#options_1","title":"Options","text":"<ul> <li><code>-f, --full</code>: Attempt to retrieve full text if available via the API (Abstract is always retrieved). [default: False]</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/articles/#examples_1","title":"Examples","text":"<p>Get article abstract by PMID:</p> <pre><code>biomcp article get 21717063\n</code></pre> <p>Get multiple articles:</p> <pre><code>biomcp article get 21717063 22301848\n</code></pre> <p>Get full text (if available):</p> <pre><code>biomcp article get 21717063 --full\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp article get 21717063 --json\n</code></pre>"},{"location":"cli/health/","title":"Health Check CLI Documentation","text":"<p>The Health Check CLI module provides commands for checking the health of API endpoints and system resources used by BioMCP.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp health check --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/health/#check-command-check","title":"Check Command (<code>check</code>)","text":"<p>Run a comprehensive health check on API endpoints and system resources.</p>"},{"location":"cli/health/#usage","title":"Usage","text":"<pre><code>biomcp health check [OPTIONS]\n</code></pre>"},{"location":"cli/health/#options","title":"Options","text":"<ul> <li><code>--api-only</code>: Check only API endpoints. [default: False]</li> <li><code>--system-only</code>: Check only system health. [default: False]</li> <li><code>-v, --verbose</code>: Show detailed error information and API responses. [default: False]</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/health/#api-endpoints-checked","title":"API Endpoints Checked","text":"<p>The health check command tests connectivity and responses from all external APIs that BioMCP depends on:</p> <ol> <li> <p>PubTator3 API:</p> </li> <li> <p>Autocomplete endpoint</p> </li> <li>Publications export endpoint</li> <li> <p>Search endpoint</p> </li> <li> <p>ClinicalTrials.gov API:</p> </li> <li> <p>Studies search endpoint</p> </li> <li> <p>Individual study retrieval endpoint</p> </li> <li> <p>MyVariant.info API:</p> </li> <li>Query endpoint</li> <li>Variant retrieval endpoint</li> </ol>"},{"location":"cli/health/#system-health-checks","title":"System Health Checks","text":"<p>When checking system health, the command evaluates:</p> <ul> <li>Network connectivity: Tests basic internet connectivity</li> <li>System resources: Monitors CPU usage, memory availability, and disk space</li> <li>Python environment: Reports Python version and critical dependencies</li> </ul> <p>Note: For full system resource checks, the <code>psutil</code> package is required. If not installed, the command will still run but will indicate that <code>psutil</code> is missing.</p>"},{"location":"cli/health/#examples","title":"Examples","text":"<p>Run a complete health check (API endpoints and system resources):</p> <pre><code>biomcp health check\n</code></pre> <p>Check only API endpoints:</p> <pre><code>biomcp health check --api-only\n</code></pre> <p>Check only system resources:</p> <pre><code>biomcp health check --system-only\n</code></pre> <p>Show detailed error information for any failing checks:</p> <pre><code>biomcp health check --verbose\n</code></pre> <p>Combine options as needed:</p> <pre><code>biomcp health check --api-only --verbose\n</code></pre>"},{"location":"cli/health/#output","title":"Output","text":"<p>The command displays results in formatted tables:</p> <ol> <li>API Endpoints Health: Shows the status of each API endpoint (200 OK or error code)</li> <li>System Resources: Displays CPU, memory, and disk usage statistics</li> <li>Network &amp; Environment: Shows network connectivity status and Python environment details</li> </ol> <p>In verbose mode, detailed error information is displayed for any failing endpoints, which can help diagnose API-related issues.</p>"},{"location":"cli/health/#exit-status","title":"Exit Status","text":"<p>The command provides a summary of overall health status:</p> <ul> <li>\"\u2713 All systems operational!\" when all checks pass</li> <li>\"\u26a0 Some health checks failed.\" when one or more checks fail</li> </ul>"},{"location":"cli/trials/","title":"Trials CLI Documentation","text":"<p>The Trials CLI module provides commands for searching and retrieving clinical trial information from ClinicalTrials.gov.</p> <p>API Documentation: For details about the underlying API, see the ClinicalTrials.gov API Documentation.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp trial search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/trials/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for clinical trials based on various filters and criteria.</p>"},{"location":"cli/trials/#usage","title":"Usage","text":"<pre><code>biomcp trial search [OPTIONS]\n</code></pre>"},{"location":"cli/trials/#basic-search-filters","title":"Basic Search Filters","text":"<ul> <li><code>-c, --condition TEXT</code>: Medical condition to search for (e.g., \"Lung Cancer\"). Can specify multiple times.</li> <li><code>-i, --intervention TEXT</code>: Treatment or intervention to search for (e.g., \"Pembrolizumab\"). Can specify multiple times.</li> <li><code>-t, --term TEXT</code>: General search terms (e.g., \"immunotherapy\"). Can specify multiple times.</li> <li><code>-n, --nct-id TEXT</code>: Specific Clinical trial NCT ID(s) to look up (e.g., NCT04179552). Can specify multiple times.</li> </ul>"},{"location":"cli/trials/#study-characteristics-filters","title":"Study Characteristics Filters","text":"<ul> <li><code>-s, --status [OPEN|CLOSED|ANY]</code>: Filter by recruitment status. [default: OPEN]</li> <li><code>--type [INTERVENTIONAL|OBSERVATIONAL|EXPANDED_ACCESS|OTHER]</code>: Filter by study type.</li> <li><code>-p, --phase [EARLY_PHASE1|PHASE1|PHASE2|PHASE3|PHASE4|NOT_APPLICABLE]</code>: Filter by trial phase.</li> <li><code>--purpose [TREATMENT|PREVENTION|DIAGNOSTIC|SUPPORTIVE_CARE|SCREENING|HEALTH_SERVICES|BASIC_SCIENCE|DEVICE_FEASIBILITY|OTHER]</code>: Filter by primary purpose.</li> <li><code>-a, --age-group [CHILD|ADULT|SENIOR|ALL]</code>: Filter by participant age group. [default: ALL]</li> </ul>"},{"location":"cli/trials/#advanced-filters","title":"Advanced Filters","text":"<ul> <li><code>--min-date TEXT</code>: Minimum date for filtering (YYYY-MM-DD format). Requires <code>--date-field</code>.</li> <li><code>--max-date TEXT</code>: Maximum date for filtering (YYYY-MM-DD format). Requires <code>--date-field</code>.</li> <li><code>--date-field [LAST_UPDATE|STUDY_START|PRIMARY_COMPLETION|OUTCOME_POSTING|COMPLETION|FIRST_POSTING|SUBMITTED_DATE]</code>: Date field to use for filtering with <code>--min-date</code>/<code>--max-date</code>. [default: STUDY_START]</li> <li><code>--intervention-type [DRUG|DEVICE|BIOLOGICAL|PROCEDURE|RADIATION|BEHAVIORAL|GENETIC|DIETARY|DIAGNOSTIC_TEST|OTHER]</code>: Filter by the type of intervention.</li> <li><code>--sponsor-type [INDUSTRY|GOVERNMENT|ACADEMIC|OTHER]</code>: Filter by the type of sponsor.</li> <li><code>--study-design [RANDOMIZED|NON_RANDOMIZED|OBSERVATIONAL]</code>: Filter by study design.</li> </ul>"},{"location":"cli/trials/#location-based-search","title":"Location-based Search","text":"<ul> <li><code>--lat FLOAT</code>: Latitude for location-based search (requires <code>--lon</code> and <code>--distance</code>).</li> <li><code>--lon FLOAT</code>: Longitude for location-based search (requires <code>--lat</code> and <code>--distance</code>).</li> <li><code>-d, --distance INTEGER</code>: Distance in miles for location-based search (requires <code>--lat</code> and <code>--lon</code>).</li> </ul>"},{"location":"cli/trials/#results-management","title":"Results Management","text":"<ul> <li><code>--sort [RELEVANCE|LAST_UPDATE|ENROLLMENT|START_DATE|COMPLETION_DATE|SUBMITTED_DATE]</code>: Sort order for results. [default: RELEVANCE]</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/trials/#examples","title":"Examples","text":"<p>Search for clinical trials about melanoma (default status is OPEN):</p> <pre><code>biomcp trial search --condition \"Melanoma\"\n</code></pre> <p>Search for completed trials involving Vemurafenib:</p> <pre><code>biomcp trial search --intervention \"Vemurafenib\" --status CLOSED\n</code></pre> <p>Search for recently started Phase 3 trials for cancer, sorted by start date:</p> <pre><code>biomcp trial search --condition \"Cancer\" --phase PHASE3 --sort START_DATE\n</code></pre> <p>Search for recruiting trials near Boston, MA (approx. coordinates):</p> <pre><code>biomcp trial search --condition \"Diabetes\" --status OPEN --lat 42.36 --lon -71.05 --distance 50\n</code></pre> <p>Search for Phase 2 Immunotherapy trials for Breast Cancer, recruiting:</p> <pre><code>biomcp trial search --condition \"Breast Cancer\" --intervention \"Immunotherapy\" --phase PHASE2 --status OPEN\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp trial search --condition \"Melanoma\" --json\n</code></pre>"},{"location":"cli/trials/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information about a specific clinical trial by its NCT ID and optionally select a specific module of information.</p>"},{"location":"cli/trials/#usage_1","title":"Usage","text":"<pre><code>biomcp trial get [OPTIONS] NCT_ID [MODULE]\n</code></pre>"},{"location":"cli/trials/#arguments","title":"Arguments","text":"<ul> <li><code>NCT_ID</code>: The NCT identifier for the clinical trial (e.g., NCT04267848). [required]</li> <li><code>MODULE</code>: Optional module to retrieve. [default: Protocol]</li> <li><code>Protocol</code>: Core study information (ID, status, design, eligibility, etc.)</li> <li><code>Locations</code>: Contact and site location information.</li> <li><code>References</code>: Associated publications and references.</li> <li><code>Outcomes</code>: Outcome measures and results (if available).</li> </ul>"},{"location":"cli/trials/#options","title":"Options","text":"<ul> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/trials/#examples_1","title":"Examples","text":"<p>Get basic protocol information for a trial:</p> <pre><code>biomcp trial get NCT04267848\n</code></pre> <p>or</p> <pre><code>biomcp trial get NCT04267848 Protocol\n</code></pre> <p>Get location information for a trial:</p> <pre><code>biomcp trial get NCT04267848 Locations\n</code></pre> <p>Get references and publications for a trial:</p> <pre><code>biomcp trial get NCT04267848 References\n</code></pre> <p>Get outcomes data for a trial:</p> <pre><code>biomcp trial get NCT04267848 Outcomes\n</code></pre> <p>Get protocol information as JSON:</p> <pre><code>biomcp trial get NCT04267848 Protocol --json\n</code></pre>"},{"location":"cli/variants/","title":"Variants CLI Documentation","text":"<p>The Variants CLI allows users to search for and retrieve genetic variant information using the MyVariant.info API.</p> <p>API Documentation: For details about the underlying API, see the MyVariant.info API Documentation.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp variant search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/variants/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for genetic variants using multiple parameters and filters. At least one search parameter (like gene, hgvsp, rsid, region) is required.</p>"},{"location":"cli/variants/#usage","title":"Usage","text":"<pre><code>biomcp variant search [OPTIONS]\n</code></pre>"},{"location":"cli/variants/#basic-search-parameters","title":"Basic Search Parameters","text":"<ul> <li><code>-g, --gene TEXT</code>: Gene symbol to search for (e.g., BRAF, TP53).</li> <li><code>--hgvsp TEXT</code>: Protein change notation using HGVS format (e.g., \"p.Val600Glu\", \"p.V600E\"). Often used with <code>--gene</code>.</li> <li><code>--hgvsc TEXT</code>: cDNA change notation using HGVS format (e.g., \"c.1799T&gt;A\"). Often used with <code>--gene</code>.</li> <li><code>--rsid TEXT</code>: dbSNP rsID (e.g., \"rs113488022\").</li> <li><code>--region TEXT</code>: Genomic region in format chr:start-end (e.g., \"chr7:140453100-140453200\").</li> </ul>"},{"location":"cli/variants/#clinical-and-functional-filters","title":"Clinical and Functional Filters","text":"<ul> <li><code>-s, --significance [pathogenic|likely_pathogenic|uncertain_significance|likely_benign|benign]</code>: Filter by ClinVar clinical significance. Case-insensitive.</li> <li><code>--min-frequency FLOAT</code>: Minimum gnomAD exome allele frequency (0.0 to 1.0).</li> <li><code>--max-frequency FLOAT</code>: Maximum gnomAD exome allele frequency (0.0 to 1.0).</li> <li><code>--cadd FLOAT</code>: Minimum CADD phred score (e.g., 15, 20). Filters for variants with score &gt;= value.</li> <li><code>--polyphen [D|P|B]</code>: Filter by PolyPhen-2 prediction (D: Probably damaging, P: Possibly damaging, B: Benign). Case-insensitive.</li> <li><code>--sift [D|T]</code>: Filter by SIFT prediction (D: Deleterious, T: Tolerated). Case-insensitive.</li> </ul>"},{"location":"cli/variants/#output-and-source-options","title":"Output and Source Options","text":"<ul> <li><code>--sources TEXT</code>: Comma-separated list of specific data sources to include in the results (e.g., \"clinvar,dbsnp,cosmic\"). See MyVariant.info docs for source names. Adding sources can increase the detail in the output.</li> <li><code>--size INTEGER</code>: Maximum number of results to return [default: 40].</li> <li><code>--offset INTEGER</code>: Result offset for pagination [default: 0]. Use with <code>--size</code> for paging.</li> <li><code>--sort TEXT</code>: Field to sort results by, using MyVariant.info syntax (e.g., \"cadd.phred:desc\").</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/variants/#examples","title":"Examples","text":"<p>Search for a variant by gene and protein change:</p> <pre><code>biomcp variant search --gene BRAF --hgvsp p.V600E\n</code></pre> <p>Search for pathogenic variants in TP53:</p> <pre><code>biomcp variant search --gene TP53 --significance pathogenic\n</code></pre> <p>Search for rare (max freq 0.1%) BRAF variants with high CADD score:</p> <pre><code>biomcp variant search --gene BRAF --max-frequency 0.001 --cadd 20\n</code></pre> <p>Search by genomic region:</p> <pre><code>biomcp variant search --region chr7:140453130-140453140\n</code></pre> <p>Search by rsID and request extra data from COSMIC:</p> <pre><code>biomcp variant search --rsid rs113488022 --sources cosmic\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp variant search --gene BRAF --hgvsp p.V600E --json\n</code></pre>"},{"location":"cli/variants/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information about a single specific variant by its identifier.</p>"},{"location":"cli/variants/#usage_1","title":"Usage","text":"<pre><code>biomcp variant get [OPTIONS] VARIANT_ID\n</code></pre>"},{"location":"cli/variants/#arguments","title":"Arguments","text":"<ul> <li><code>VARIANT_ID</code>: The variant identifier. This can be a MyVariant.info ID (HGVS format, e.g., \"chr7:g.140453136A&gt;T\") or a dbSNP rsID (e.g., \"rs113488022\"). [required]</li> </ul>"},{"location":"cli/variants/#options","title":"Options","text":"<ul> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/variants/#examples_1","title":"Examples","text":"<p>Get a variant by HGVS ID:</p> <pre><code>biomcp variant get chr7:g.140453136A&gt;T\n</code></pre> <p>Get a variant by rsID:</p> <pre><code>biomcp variant get rs113488022\n</code></pre> <p>Get a variant by rsID as JSON:</p> <pre><code>biomcp variant get rs113488022 --json\n</code></pre>"},{"location":"cli/variants/#output-format","title":"Output Format","text":"<p>By default, both search and get output variant information in Markdown format, designed for readability. This includes key annotations and automatically generated links to external databases like dbSNP, ClinVar, Ensembl, UCSC Genome Browser, etc., where applicable.</p> <p>Use the <code>--json</code> flag to get the raw data (with injected URLs) as a JSON object, which is useful for scripting or integration with other tools. The specific fields returned by default in a search focus on common identifiers and annotations; use <code>--sources</code> to request more comprehensive data for specific databases. The get command retrieves all available default fields plus database links.</p>"},{"location":"troubleshooting/macos/","title":"MacOS Troubleshooting Guide","text":"<p>Prerequisites:</p> <ul> <li>Ensure you have <code>uv</code> installed. Recommended method for macOS:   <pre><code>brew install uv\n</code></pre>   For other systems or methods, see the uv installation guide.</li> <li>Ensure you have <code>npx</code> available (usually comes with Node.js/npm). Recommended method for macOS if needed:   <pre><code>brew install node\n</code></pre></li> </ul> <p>1. Testing the CLI Directly:</p> <p>You can run <code>biomcp</code> commands directly without a full installation using <code>uv</code>:</p> <ul> <li>Check the version:   <pre><code>uv run --with biomcp-python biomcp version\n# Expected Output (version may vary): biomcp version: 0.1.0\n</code></pre></li> <li>Test a search command (e.g., trial search):   <pre><code>uv run --with biomcp-python biomcp trial search --condition NSCLC | head -n 5\n# Expected Output (NCT ID and Title will vary):\n# # Record 1\n# Nct Number: NCT0XXXXXXX\n# Study Title:\n#   Some Title Related to NSCLC\n# Study Url: https://clinicaltrials.gov/study/NCT0XXXXXXX\n</code></pre></li> </ul> <p>2. Testing the MCP Server with Inspector:</p> <p>This verifies that the server starts correctly and the tools are available via the Model Context Protocol.</p> <ul> <li>Run the inspector, telling it to start your server using the <code>uv</code> command:   <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre></li> <li>Open the MCP Inspector interface in your browser (usually <code>http://127.0.0.1:6274</code>).</li> <li>You should see the list of available tools (e.g., <code>article_searcher</code>, <code>trial_protocol</code>, <code>variant_searcher</code>, etc.).</li> <li>Try invoking a tool:</li> <li>Select <code>trial_searcher</code>.</li> <li>Enter valid JSON input matching the <code>TrialQuery</code> model, for example:     <pre><code>{\n  \"conditions\": [\"Melanoma\"],\n  \"recruiting_status\": \"OPEN\"\n}\n</code></pre></li> <li>Click \"Call Tool\".</li> <li>You should see a Markdown-formatted list of results in the \"Output\" section.</li> </ul>"},{"location":"tutorials/claude-desktop/","title":"BioMCP with Claude Desktop: Step-by-Step Tutorial","text":"<p>This tutorial will guide you through setting up BioMCP as a Model Context Protocol (MCP) server for Claude Desktop, allowing Claude to access specialized biomedical data.</p>"},{"location":"tutorials/claude-desktop/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop: Download from Anthropic</li> <li>Python: 3.11 or newer</li> <li>uv: Installation</li> </ul> <p>Verify the uv installation on the command line:</p> <pre><code>uv --version\n</code></pre> <p>Make sure it is installed globally for Claude to access. For instance, on MacOS, we recommend installing <code>uv</code> using Homebrew:</p> <pre><code>% which uv\n/opt/homebrew/bin/uv\n</code></pre>"},{"location":"tutorials/claude-desktop/#configure-claude-desktop","title":"Configure Claude Desktop","text":"<p>Open Claude Desktop and access the Settings &gt; Developer section.</p> <p>Then click \"Edit Config\" which on MacOS opens up the folder containing this file:</p> <pre><code>claude_desktop_config.json\n</code></pre> <p>Edit the file like this using your favorite text editor:</p> <pre><code>{\n  \"biomcp\": {\n    \"command\": \"uv\",\n    \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n  }\n}\n</code></pre> <p>We also recommend using Sequential Thinking MCP, which can be added as well by making your whole file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n    },\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-sequential-thinking\"]\n    }\n  }\n}\n</code></pre> <p>For more information about Sequential Thinking: https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking</p> <p>Save your JSON file and restart Claude Desktop.</p>"},{"location":"tutorials/claude-desktop/#using-biomcp-with-claude","title":"Using BioMCP with Claude","text":"<p>Upload loading, we recommend accessing the BioMCP \"custom instructions\" by clicking the \"connector\" icon below the chat that says \"Attach from MCP\".</p> <p>In that dialog, select the biomcp instructions as an \"integration\" and the MCP resource will be added as text.</p> <p>You should see at least 9 tools that can be accessed with BioMCP plus any other tools you have configured (10 total with sequential thinking, for instance).</p> <p>Below are some example questions to try based on your use cases/research.</p>"},{"location":"tutorials/claude-desktop/#clinical-trials-queries","title":"Clinical Trials Queries","text":"<p>Try questions like:</p> <ul> <li>\"Find Phase 3 clinical trials for lung cancer with immunotherapy\"</li> <li>\"Are there any recruiting breast cancer trials near Boston?\"</li> <li>\"What are the eligibility criteria for trial NCT04280705?\"</li> </ul>"},{"location":"tutorials/claude-desktop/#pubmed-articles-queries","title":"PubMed Articles Queries","text":"<p>Try questions like:</p> <ul> <li>\"Summarize recent research on EGFR mutations in lung cancer\"</li> <li>\"Find articles about the relationship between BRAF mutations and melanoma\"</li> <li>\"Get the abstract of PubMed article 21717063\"</li> </ul>"},{"location":"tutorials/claude-desktop/#genetic-variants-queries","title":"Genetic Variants Queries","text":"<p>Try questions like:</p> <ul> <li>\"What's the clinical significance of the BRAF V600E mutation?\"</li> <li>\"Find pathogenic variants in the TP53 gene\"</li> <li>\"Explain the difference between Class I and Class III BRAF mutations\"</li> </ul>"},{"location":"tutorials/claude-desktop/#combination-queries","title":"Combination Queries","text":"<p>Claude can combine multiple BioMCP tools in a single query:</p> <ul> <li>\"I'm researching KRAS G12C mutations in lung cancer. Can you find:\"</li> <li>The key characteristics of this mutation</li> <li>Recent clinical trials targeting it</li> <li>Significant research papers from the last 2 years</li> </ul> <p>Claude can help with complex biomedical research workflows:</p> <ul> <li>I'm studying treatment resistance in ALK-positive lung cancer. Help me:</li> <li>Identify the main ALK fusion variants</li> <li>Find current clinical trials testing next-generation ALK inhibitors</li> <li>Summarize recent literature on resistance mechanisms</li> </ul>"},{"location":"tutorials/claude-desktop/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/claude-desktop/#common-issues","title":"Common Issues","text":"<ul> <li>\"SPAWN ENOENT\" Error:</li> <li>Make sure <code>uv</code> is in your PATH</li> <li>Try using the full path to <code>uv</code> in the configuration</li> <li>Claude doesn't use BioMCP</li> <li>Verify you've correctly configured the MCP server</li> <li>Check if your query is specific enough to trigger BioMCP usage</li> <li>Ask Claude directly to search trials, variants, or articles using BioMCP</li> <li>No results returned</li> <li>Your query may be too specific or use terms not in the databases</li> <li>Try reformulating with more standard medical terminology</li> </ul>"},{"location":"tutorials/claude-desktop/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>Claude Desktop Documentation</li> <li>Model Context Protocol (MCP) Guide</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/","title":"Deploying BioMCP as a Cloudflare Worker","text":"<p>This guide explains how to deploy BioMCP as a Cloudflare Worker using Server-Sent Events (SSE) for communication.</p>"},{"location":"tutorials/cloudflare-worker-deployment/#overview","title":"Overview","text":"<p>BioMCP now supports two deployment modes:</p> <ol> <li>Local STDIO Mode: The traditional mode where the server communicates via standard input/output.</li> <li>Cloudflare Worker Mode: Deployment as a Cloudflare Worker using SSE for communication.</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Cloudflare account with Workers enabled</li> <li>Wrangler CLI installed</li> <li>For local development of the Worker mode: <code>pip install biomcp-python[worker]</code></li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#architecture","title":"Architecture","text":"<p>When deployed as a Cloudflare Worker, BioMCP works as follows:</p> <ol> <li>The Cloudflare Worker receives HTTP requests from clients</li> <li>The Worker forwards these requests to your remote MCP server</li> <li>The remote MCP server processes the requests and returns responses</li> <li>The Worker streams these responses back to clients using SSE</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#architecture-diagram","title":"Architecture Diagram","text":"<p>Below is an improved diagram of the setup:</p> <pre><code>+-----------------------+\n|  Claude Desktop (or   |\n|    other client)      |\n+----------+------------+\n           |\n           v\n+----------+------------+\n|   Cloudflare Worker   |\n+----------+------------+\n           |\n           v\n+-------------------------------+\n|   FastMCP Python Service      |\n|   (Docker, hosted server)     |\n+-------------------------------+\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#setup","title":"Setup","text":""},{"location":"tutorials/cloudflare-worker-deployment/#1-configure-your-remote-mcp-server","title":"1. Configure Your Remote MCP Server","text":"<p>First, you need to set up a remote MCP server that will handle the actual processing:</p>"},{"location":"tutorials/cloudflare-worker-deployment/#using-docker-compose","title":"Using Docker Compose","text":"<p>A Docker Compose file is now provided for building and deploying the remote FastMCP Python service. You must set the <code>TAG</code> variable to specify the image version:</p> <pre><code>TAG=latest docker compose up -d\n</code></pre> <ul> <li>The service will be accessible on the configured port (default: 8000).</li> <li>Ensure your server is reachable from Cloudflare Workers.</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#manual-installation","title":"Manual Installation","text":"<pre><code># Install with worker dependencies\npip install biomcp-python[worker]\n\n# Run the server in worker mode\nbiomcp run --mode worker --host 0.0.0.0 --port 8000\n</code></pre> <p>Make sure this server is accessible from the internet, or at least from Cloudflare Workers.</p>"},{"location":"tutorials/cloudflare-worker-deployment/#2-configure-cloudflare-worker","title":"2. Configure Cloudflare Worker","text":"<p>Edit the <code>wrangler.toml</code> file to point to your remote MCP server:</p> <pre><code>[vars]\nREMOTE_MCP_SERVER_URL = \"https://your-remote-mcp-server.com/mcp\"\n# Add an API key if your server requires authentication\nMCP_SERVER_API_KEY = \"your-api-key\"\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#3-deploy-the-worker","title":"3. Deploy the Worker","text":"<p>Use Wrangler to deploy your Worker:</p> <pre><code># Login to Cloudflare\nnpx wrangler@latest login\n\n# Deploy the worker\nnpx wrangler@latest deploy\n\n# Tail logs for debugging\nnpx wrangler@latest tail\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#benefits-of-remote-mcp","title":"Benefits of Remote MCP","text":"<ul> <li>Scalability: Offloads heavy computation to a dedicated server, reducing load on the Worker and improving performance.</li> <li>Security: The Worker acts as a secure proxy, hiding your backend and enabling API key protection.</li> <li>Flexibility: You can update or scale the Python service independently of the Worker.</li> <li>Debugging: Use <code>npx wrangler tail</code> for real-time logs and easier troubleshooting.</li> <li>Modern Deployment: Docker Compose simplifies environment setup and reproducibility.</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#usage","title":"Usage","text":"<p>Once deployed, your Cloudflare Worker will be available at a URL like: <code>https://biomcp-worker.&lt;your-worker-subdomain&gt;.workers.dev</code></p> <p>Clients can connect to this endpoint using SSE:</p> <pre><code>// Example client-side JavaScript\nconst eventSource = new EventSource(\n  \"https://biomcp-worker.&lt;your-worker-subdomain&gt;.workers.dev\",\n);\n\neventSource.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log(\"Received:\", data);\n\n  // Check for the end of the stream\n  if (event.data === \"[DONE]\") {\n    eventSource.close();\n  }\n};\n\neventSource.onerror = (error) =&gt; {\n  console.error(\"EventSource error:\", error);\n  eventSource.close();\n};\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#local-development","title":"Local Development","text":"<p>For local development and testing, you can run the worker mode locally:</p> <pre><code># Run the server in worker mode on localhost\nbiomcp run --mode worker --host 127.0.0.1 --port 8000\n</code></pre> <p>Then use Wrangler to develop locally:</p> <pre><code>npx wrangler@latest dev\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/cloudflare-worker-deployment/#worker-connection-issues","title":"Worker Connection Issues","text":"<p>If the Worker cannot connect to your remote MCP server:</p> <ol> <li>Ensure your remote server is publicly accessible</li> <li>Check that the <code>REMOTE_MCP_SERVER_URL</code> is correctly set</li> <li>Verify any authentication requirements</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cloudflare Workers have execution time limits (typically 30 seconds for free accounts)</li> <li>Consider implementing timeouts and chunking for large responses</li> <li>Monitor your Worker's performance in the Cloudflare dashboard</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#security-considerations","title":"Security Considerations","text":"<ul> <li>Always use HTTPS for communication between the Worker and your remote MCP server</li> <li>Consider implementing authentication for your remote MCP server</li> <li>Do not expose sensitive information in your Worker code</li> </ul>"},{"location":"tutorials/cursor-ide/","title":"BioMCP with Cursor IDE: Step-by-Step Tutorial","text":"<p>This tutorial will guide you through setting up BioMCP within the Cursor IDE, allowing you to access specialized biomedical data directly from your development environment.</p>"},{"location":"tutorials/cursor-ide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Cursor IDE: Download and install from the official website</li> <li>A Smithery account with an active token</li> </ul>"},{"location":"tutorials/cursor-ide/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Download and install Cursor IDE from https://www.cursor.com/en</p> </li> <li> <p>Open Cursor IDE and access the terminal (you can use the keyboard shortcut <code>Ctrl+`</code> or go to Terminal &gt; New Terminal)</p> </li> <li> <p>In the Cursor terminal, run the following command:</p> </li> </ol> <pre><code>npx -y @smithery/cli@latest install @genomoncology/biomcp --client cursor\n</code></pre> <ol> <li> <p>You will be prompted to enter your Smithery token, which can be retrieved from your Smithery account</p> </li> <li> <p>Once the installation completes successfully, BioMCP is ready to use within Cursor IDE</p> </li> </ol>"},{"location":"tutorials/cursor-ide/#using-biomcp-with-cursor","title":"Using BioMCP with Cursor","text":"<p>You can now use BioMCP by asking questions directly in the Cursor IDE. For example, try asking:</p> <ul> <li>\"What are the locations for NCT04280705?\"</li> </ul> <p>The response will include detailed information about the clinical trial locations:</p> <p></p>"},{"location":"tutorials/cursor-ide/#example-queries","title":"Example Queries","text":""},{"location":"tutorials/cursor-ide/#clinical-trials-queries","title":"Clinical Trials Queries","text":"<p>Try questions like:</p> <ul> <li>\"Find Phase 3 clinical trials for lung cancer with immunotherapy\"</li> <li>\"Are there any recruiting breast cancer trials near Boston?\"</li> <li>\"What are the eligibility criteria for trial NCT04280705?\"</li> </ul>"},{"location":"tutorials/cursor-ide/#pubmed-articles-queries","title":"PubMed Articles Queries","text":"<p>Try questions like:</p> <ul> <li>\"Summarize recent research on EGFR mutations in lung cancer\"</li> <li>\"Find articles about the relationship between BRAF mutations and melanoma\"</li> <li>\"Get the abstract of PubMed article 21717063\"</li> </ul>"},{"location":"tutorials/cursor-ide/#genetic-variants-queries","title":"Genetic Variants Queries","text":"<p>Try questions like:</p> <ul> <li>\"What's the clinical significance of the BRAF V600E mutation?\"</li> <li>\"Find pathogenic variants in the TP53 gene\"</li> <li>\"Explain the difference between Class I and Class III BRAF mutations\"</li> </ul>"},{"location":"tutorials/cursor-ide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/cursor-ide/#common-issues","title":"Common Issues","text":"<ul> <li> <p>Installation fails:</p> </li> <li> <p>Make sure you have the correct Smithery token</p> </li> <li>Check your internet connection</li> <li> <p>Verify you have the necessary permissions to install packages</p> </li> <li> <p>No results returned:</p> </li> <li>Your query may be too specific or use terms not in the databases</li> <li>Try reformulating with more standard medical terminology</li> </ul>"},{"location":"tutorials/cursor-ide/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>Cursor IDE Documentation</li> <li>Smithery Documentation</li> </ul>"},{"location":"tutorials/mcp-client/","title":"BioMCP with MCP Client Tutorial","text":""},{"location":"tutorials/mcp-client/#overview","title":"Overview","text":"<p>This tutorial explains how to integrate BioMCP with MCP clients programmatically. The Model Context Protocol (MCP) enables applications to interact with BioMCP as a specialized tool server, providing structured access to biomedical data sources.</p>"},{"location":"tutorials/mcp-client/#key-features","title":"Key Features","text":"<ul> <li>STDIO Communication: BioMCP uses standard input/output for MCP communication</li> <li>Tool Discovery: Clients can discover available tools through the MCP interface</li> <li>Resource Access: Provides access to BioMCP resources and instructions</li> <li>Standard Protocol: Follows the MCP 1.0 specification for compatibility with clients</li> </ul>"},{"location":"tutorials/mcp-client/#main-components","title":"Main Components","text":"<p>The MCP integration relies on these key components:</p> <ol> <li> <p>MCP Client</p> </li> <li> <p>Python client from the <code>mcp</code> package</p> </li> <li> <p>Handles communication with the BioMCP server</p> </li> <li> <p>BioMCP Server</p> </li> <li> <p>Started as a subprocess with the <code>biomcp run</code> command</p> </li> <li> <p>Exposes biomedical data tools through the MCP interface</p> </li> <li> <p>Tool Invocation</p> </li> <li>Execute biomedical queries using standardized tool calls</li> <li>Process structured responses for application integration</li> </ol>"},{"location":"tutorials/mcp-client/#basic-usage-pattern","title":"Basic Usage Pattern","text":"<p>Integrating with BioMCP through MCP follows this pattern:</p> <ol> <li>Start the BioMCP server as a subprocess</li> <li>Create an MCP client session to communicate with the server</li> <li>Discover available tools and resources</li> <li>Call tools with appropriate parameters</li> <li>Process the returned content</li> </ol>"},{"location":"tutorials/mcp-client/#example-code","title":"Example Code","text":"<p>Here's a minimal example showing how to connect to BioMCP using the Python MCP client:</p> <pre><code>import asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\nasync def connect_to_biomcp():\n    # Configure the BioMCP server\n    server_params = StdioServerParameters(\n        command=\"uv\",\n        args=[\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n    )\n\n    # Connect to the server\n    async with (\n        stdio_client(server_params) as (read, write),\n        ClientSession(read, write) as session\n    ):\n        # Initialize the session\n        await session.initialize()\n\n        # List available tools\n        tool_result = await session.list_tools()\n        print(f\"Available tools: {[t.name for t in tool_result.tools]}\")\n\n        # Call a tool example (variant details)\n        result = await session.call_tool(\n            \"variant_details\",\n            {\"variant_id\": \"rs113488022\"}\n        )\n\n        if not result.isError and result.content:\n            # Access the text content from the first content block\n            content = result.content[0].text\n            print(f\"Result snippet: {content[:100]}...\")\n\n# Run the example\nif __name__ == \"__main__\":\n    asyncio.run(connect_to_biomcp())\n</code></pre> <p>For a complete example of integrating BioMCP with an MCP client, see:</p> <p>BioMCP MCP Integration Example Script</p>"},{"location":"tutorials/mcp-client/#available-tools","title":"Available Tools","text":"<p>BioMCP exposes these tools through the MCP interface:</p> <ol> <li> <p>Article Tools</p> </li> <li> <p><code>article_searcher</code>: Search biomedical literature</p> </li> <li> <p><code>article_details</code>: Get details for a specific article</p> </li> <li> <p>Trial Tools</p> </li> <li> <p><code>trial_searcher</code>: Search clinical trials</p> </li> <li><code>trial_protocol</code>: Get trial protocol details</li> <li><code>trial_locations</code>: Get trial location information</li> <li><code>trial_outcomes</code>: Get trial outcome data</li> <li> <p><code>trial_references</code>: Get trial references</p> </li> <li> <p>Variant Tools</p> </li> <li><code>variant_searcher</code>: Search genetic variants</li> <li><code>variant_details</code>: Get detailed variant information</li> </ol>"},{"location":"tutorials/mcp-client/#integration-options","title":"Integration Options","text":"<p>There are several ways to integrate BioMCP with MCP clients:</p> <ol> <li>Direct Python Integration: Use the example above in Python applications</li> <li>Language-Specific Clients: Implement MCP clients in other languages (JavaScript, etc.)</li> <li>AI Assistant Integration: Configure LLM platforms to use BioMCP as a tool provider</li> </ol>"},{"location":"tutorials/mcp-client/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues when integrating BioMCP:</p> <ul> <li>Server Not Found: Ensure BioMCP is installed and the command path is correct</li> <li>Connection Errors: Check subprocess management and STDIO handling</li> <li>Tool Errors: Verify tool names and parameter formats match BioMCP's expectations</li> </ul>"},{"location":"tutorials/mcp-client/#next-steps","title":"Next Steps","text":"<p>For more information on MCP integration with BioMCP:</p> <ul> <li>Explore the MCP Client Library</li> <li>Review the MCP Specification</li> <li>Try the MCP Inspector for interactive debugging</li> </ul>"},{"location":"tutorials/mcp-inspector/","title":"Testing BioMCP with MCP Inspector: Step-by-Step Tutorial","text":"<p>This tutorial guides you through using the MCP Inspector to test and debug BioMCP integration. The MCP Inspector provides a user-friendly interface to interact with BioMCP directly, without needing to integrate with an AI assistant first.</p>"},{"location":"tutorials/mcp-inspector/#what-is-the-mcp-inspector","title":"What is the MCP Inspector?","text":"<p>The MCP Inspector is a tool developed by Anthropic that allows you to:</p> <ul> <li>Test MCP servers like BioMCP directly</li> <li>Browse available tools and their parameters</li> <li>Send test requests and view responses</li> <li>Debug MCP server integrations</li> </ul>"},{"location":"tutorials/mcp-inspector/#step-1-start-mcp-inspector","title":"Step 1: Start MCP Inspector","text":"<p>To run biomcp inside the MCP inspector, use the following command:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre> <p>This will launch the inspector interface (usually at http://127.0.0.1:6274).</p>"},{"location":"tutorials/mcp-inspector/#step-2-connect","title":"Step 2: Connect","text":"<p>Press the \"Connect\" button to establish a connection to the MCP server.</p>"},{"location":"tutorials/mcp-inspector/#step-3-list-tools","title":"Step 3: List Tools","text":"<p>The Inspector should display the available BioMCP tools:</p> <ul> <li><code>article_searcher</code></li> <li><code>article_details</code></li> <li><code>trial_searcher</code></li> <li><code>trial_protocol</code></li> <li><code>trial_locations</code></li> <li><code>trial_outcomes</code></li> <li><code>trial_references</code></li> <li><code>variant_searcher</code></li> <li><code>variant_details</code></li> </ul> <p>Click on any tool to see its description and input parameters.</p>"},{"location":"tutorials/mcp-inspector/#step-4-test-biomcp-tools","title":"Step 4: Test BioMCP Tools","text":"<p>Let's test each BioMCP tool with example inputs. For each test:</p> <ol> <li>Select the tool from the list</li> <li>Copy and paste the corresponding JSON input</li> <li>Click \"Call Tool\" to send the request</li> <li>Review the response in the Output section</li> </ol>"},{"location":"tutorials/mcp-inspector/#tool-1-article_searcher","title":"Tool 1: article_searcher","text":"<p>Input:</p> <pre><code>{\n  \"genes\": [\"EGFR\"],\n  \"diseases\": [\"NSCLC\"],\n  \"variants\": [\"BRAF V600E\"],\n  \"keywords\": [\"MEK Inhibitors\"],\n  \"chemicals\": [\"Afatinib\"]\n}\n</code></pre> <p>Example Output:</p> <pre><code># Record 1\n\nPmid: 33402199\nPmcid: PMC7786519\nTitle: MEK inhibitors for the treatment of non-small cell lung cancer\nJournal: J Hematol Oncol\nDate: 2021-01-05T00:00:00Z\nDoi: 10.1186/s13045-020-01025-7\nAbstract:\nBRAF and KRAS are two key oncogenes in the RAS/RAF/MEK/MAPK signaling\npathway. Concomitant mutations in both KRAS and BRAF genes have been\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-2-article_details","title":"Tool 2: article_details","text":"<p>Input:</p> <pre><code>21717063\n</code></pre> <p>Example Output:</p> <p>Same as <code>article_search</code> first record but with Full Text after the abstract:</p> <pre><code>Full Text:\nIntroduction\nLung cancer is the most common cause of cancer-related death worldwide,...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-3-trial_searcher","title":"Tool 3: trial_searcher","text":"<p>Input:</p> <pre><code>{\n  \"conditions\": [\"Lung Cancer\"],\n  \"interventions\": [\"Pembrolizumab\"],\n  \"recruiting_status\": \"OPEN\",\n  \"phase\": \"PHASE3\"\n}\n</code></pre> <p>Example Output:</p> <pre><code># Record 1\n\nNct Number: NCT06847334\nStudy Title:\nA Study to Compare the Efficacy, Safety, Immunogenicity, and\nPharmacokinetic Profile of HLX17 Vs. Keytruda\u00ae in the First-Line\nTreatment of Advanced Non-squamous Non-small Cell Lung Cancer\nStudy Url: https://clinicaltrials.gov/study/NCT06847334\nStudy Status: NOT_YET_RECRUITING\nBrief Summary:\nThis is a multicentre, randomized, double-blind, parallel-controlled\nintegrated phase I/III clinical study to evaluate the similarity in\nefficacy, safety, PK profile, and immunogenicity of HLX17 vs. Keytruda\u00ae(\nUS- and EU-sourced) in the first-line treatment of advanced non-squamous\n...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-4-trial_protocol","title":"Tool 4: trial_protocol","text":""},{"location":"tutorials/mcp-inspector/#tool-5-trial_locations","title":"Tool 5: trial_locations","text":""},{"location":"tutorials/mcp-inspector/#tool-6-trial_outcomes","title":"Tool 6: trial_outcomes","text":""},{"location":"tutorials/mcp-inspector/#tool-7-trial_references","title":"Tool 7: trial_references","text":"<p>All trial \"detail\" tools work the same way by specifying the NCT ID.</p> <p>Input:</p> <pre><code>NCT04280705\n</code></pre> <p>Example Output:</p> <pre><code>Url: https://clinicaltrials.gov/study/NCT04280705\n\n# Protocol Section\n\n## Identification Module\n\nNct Id: NCT04280705\nBrief Title: Adaptive COVID-19 Treatment Trial (ACTT)\nOfficial Title:\nA Multicenter, Adaptive, Randomized Blinded Controlled Trial of the\nSafety and Efficacy of Investigational Therapeutics for the Treatment of\nCOVID-19 in Hospitalized Adults\n...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-8-variant_searcher","title":"Tool 8: variant_searcher","text":"<p>Input:</p> <pre><code>{\n  \"gene\": \"BRAF\",\n  \"hgvsp\": \"p.V600E\",\n  \"size\": 5\n}\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-9-variant_details","title":"Tool 9: variant_details","text":"<p>Input:</p> <pre><code>rs113488022\n</code></pre> <p>or</p> <pre><code>chr7:g.140453136A&gt;T\n</code></pre>"},{"location":"tutorials/mcp-inspector/#testing-location-based-search","title":"Testing Location-Based Search","text":"<p>Tool: <code>trial_searcher</code> Input:</p> <pre><code>{\n  \"conditions\": [\"Breast Cancer\"],\n  \"recruiting_status\": \"OPEN\",\n  \"lat\": 42.3601,\n  \"long\": -71.0589,\n  \"distance\": 100\n}\n</code></pre>"},{"location":"tutorials/mcp-inspector/#testing-variant-filtering","title":"Testing Variant Filtering","text":"<p>Tool: <code>variant_searcher</code> Input:</p> <pre><code>{\n  \"gene\": \"TP53\",\n  \"significance\": \"pathogenic\",\n  \"max_frequency\": 0.01,\n  \"cadd\": 20,\n  \"size\": 10\n}\n</code></pre>"},{"location":"tutorials/python-sdk/","title":"BioMCP Python SDK Tutorial","text":""},{"location":"tutorials/python-sdk/#overview","title":"Overview","text":"<p>The BioMCP Python SDK allows you to integrate BioMCP's biomedical data access capabilities directly into your Python applications. This tutorial provides a high-level overview of the SDK's capabilities.</p>"},{"location":"tutorials/python-sdk/#key-features","title":"Key Features","text":"<ul> <li>Asynchronous API: All BioMCP functions are async, designed for efficient network operations</li> <li>JSON or Markdown Output: Choose between formatted Markdown for display or JSON for programmatic use</li> <li>Validated Models: Input using Pydantic models for type safety and validation</li> <li>Complete API Coverage: Access all BioMCP capabilities (variants, trials, articles) programmatically</li> </ul>"},{"location":"tutorials/python-sdk/#main-components","title":"Main Components","text":"<p>The SDK is organized into domain-specific modules:</p> <ol> <li> <p>Variants Module</p> </li> <li> <p>Search for genetic variants with <code>search_variants()</code></p> </li> <li> <p>Retrieve detailed variant information with <code>get_variant()</code></p> </li> <li> <p>Trials Module</p> </li> <li> <p>Search for clinical trials with <code>search_trials()</code></p> </li> <li> <p>Get trial details with <code>get_trial()</code></p> </li> <li> <p>Articles Module</p> </li> <li>Search for medical literature with <code>search_articles()</code></li> <li>Retrieve article details with <code>fetch_articles()</code></li> </ol>"},{"location":"tutorials/python-sdk/#basic-usage-pattern","title":"Basic Usage Pattern","text":"<p>All BioMCP SDK functions follow a similar pattern:</p> <ol> <li>Import required modules and models</li> <li>Create a query object (e.g., <code>VariantQuery</code>, <code>TrialQuery</code>)</li> <li>Call the async function with the query</li> <li>Process the results (as Markdown or JSON)</li> </ol>"},{"location":"tutorials/python-sdk/#example-code","title":"Example Code","text":"<p>To use the below code, either use the <code>uv</code> script runner or install the biomcp-python package using pip or uv.</p> <pre><code>pip install biomcp-python\n</code></pre> <p>or uv pip install:</p> <pre><code>uv pip install biomcp-python\n</code></pre> <p>or add the package to your uv project:</p> <pre><code>uv add biomcp-python\n</code></pre> <p>or run the script directly:</p> <pre><code>#!/usr/bin/env -S uv --quiet run --script\n# /// script\n# requires-python = \"&gt;=3.11\"\n# dependencies = [\n#     \"biomcp-python\",\n# ]\n# ///\n\nimport json\n\nfrom biomcp.variants.search import VariantQuery, search_variants\n\nasync def find_pathogenic_tp53():\n    # noinspection PyTypeChecker\n    query = VariantQuery(gene=\"TP53\", significance=\"pathogenic\", size=5)\n    # Get results as Markdown (default)\n    json_output_str = await search_variants(query, output_json=True)\n    data = json.loads(json_output_str)\n    assert len(data) == 5\n    for item in data:\n        clinvar = item.get(\"clinvar\")\n        for rcv in clinvar.get(\"rcv\", []):\n            assert \"pathogenic\" in rcv[\"clinical_significance\"].lower()\n</code></pre> <p>For complete examples of the BioMCP Python SDK in action, see the official example script:</p> <p>BioMCP Python SDK Example Script</p>"},{"location":"tutorials/python-sdk/#next-steps","title":"Next Steps","text":"<p>For more detailed information on the SDK:</p> <ul> <li>Explore the source code at github.com/genomoncology/biomcp</li> <li>Run <code>help()</code> on imported modules and classes for API details</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/","title":"Setting Up Stytch OAuth for BioMCP","text":"<p>This document outlines the steps required to set up Stytch OAuth authentication for the BioMCP application.</p>"},{"location":"tutorials/stytch_oauth_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Stytch account (sign up at Stytch)</li> <li>Access to the BioMCP codebase</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#setting-up-your-stytch-account","title":"Setting Up Your Stytch Account","text":"<ol> <li> <p>Create a Stytch Account</p> </li> <li> <p>Sign up at Stytch</p> </li> <li> <p>Select \"Consumer Authentication\" when prompted during the setup process</p> </li> <li> <p>Configure the Stytch Project</p> </li> <li> <p>In the Stytch dashboard, navigate to \"Frontend SDKs\" and enable the frontend SDK</p> </li> <li>Navigate to \"Connected Apps\" and enable \"Dynamic Client Registration\"</li> <li> <p>This allows MCP clients to register themselves dynamically with Stytch</p> </li> <li> <p>Retrieve Your Credentials</p> </li> <li>Go to \"Project Settings\" in the Stytch dashboard</li> <li>Note down the following credentials:<ul> <li>Project ID</li> <li>Secret (API Key)</li> <li>Public Token</li> </ul> </li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#configuring-biomcp-with-stytch","title":"Configuring BioMCP with Stytch","text":"<ol> <li> <p>Update the Wrangler Configuration</p> </li> <li> <p>Open <code>wrangler.toml</code> in the BioMCP project</p> </li> <li>Update the following variables with your Stytch credentials:      <pre><code>STYTCH_PROJECT_ID = \"your-project-id\"\nSTYTCH_SECRET = \"your-secret-key\"\nSTYTCH_PUBLIC_TOKEN = \"your-public-token\"\n</code></pre></li> <li>For development, use the test environment:      <pre><code>STYTCH_API_URL = \"https://test.stytch.com/v1\"\n</code></pre></li> <li> <p>For production, use:      <pre><code>STYTCH_API_URL = \"https://api.stytch.com/v1\"\n</code></pre></p> </li> <li> <p>Configure the OAuth KV Namespace</p> </li> <li> <p>Create a KV namespace in Cloudflare for storing OAuth tokens and state</p> </li> <li> <p>Update the KV namespace ID in <code>wrangler.toml</code>:      <pre><code>[[kv_namespaces]]\nbinding = \"OAUTH_KV\"\nid = \"your-kv-namespace-id\"\n</code></pre></p> </li> <li> <p>Configure JWT Secret</p> </li> <li>Set a strong JWT secret for token signing:      <pre><code>JWT_SECRET = \"your-secure-jwt-secret\"\n</code></pre></li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#oauth-flow-overview","title":"OAuth Flow Overview","text":"<p>The BioMCP application uses the following OAuth flow:</p> <ol> <li>Discovery: MCP clients fetch OAuth metadata to locate Stytch authorization endpoints</li> <li>Registration: MCP clients dynamically register with Stytch</li> <li>Authorization: Users are redirected to Stytch for authentication and consent</li> <li>Token Exchange: After consent, authorization codes are exchanged for access tokens</li> <li>MCP Connection: MCP clients connect to the BioMCP server using OAuth access tokens</li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#endpoints","title":"Endpoints","text":"<p>The worker implements the following OAuth endpoints:</p> <ul> <li><code>/.well-known/oauth-authorization-server</code>: OAuth server metadata</li> <li><code>/authorize</code>: OAuth authorization endpoint</li> <li><code>/callback</code>: OAuth callback endpoint</li> <li><code>/token</code>: Token exchange endpoint</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#testing","title":"Testing","text":"<p>To test the OAuth implementation:</p> <ol> <li>Deploy the worker to Cloudflare:</li> </ol> <pre><code>wrangler deploy\n</code></pre> <ol> <li>Use the MCP Inspector or another OAuth client to test the flow:</li> <li>Set the OAuth discovery URL to: <code>https://your-worker.workers.dev/.well-known/oauth-authorization-server</code></li> <li>The inspector will guide you through the OAuth flow</li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>JWT Validation Issues: Ensure the JWKS endpoint is correctly configured and accessible</li> <li>Callback Errors: Check that the redirect URIs are properly registered and match exactly</li> <li>Token Exchange Failures: Verify that the authorization code is valid and not expired</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#security-considerations","title":"Security Considerations","text":"<ul> <li>Always use HTTPS for all OAuth endpoints</li> <li>Implement proper CORS headers for cross-origin requests</li> <li>Regularly rotate the JWT secret</li> <li>Use the production Stytch API URL for production environments</li> </ul>"}]}